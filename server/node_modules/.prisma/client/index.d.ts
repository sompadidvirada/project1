
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model product
 * 
 */
export type product = $Result.DefaultSelection<Prisma.$productPayload>
/**
 * Model brach
 * 
 */
export type brach = $Result.DefaultSelection<Prisma.$brachPayload>
/**
 * Model trackingsell
 * 
 */
export type trackingsell = $Result.DefaultSelection<Prisma.$trackingsellPayload>
/**
 * Model trackingsend
 * 
 */
export type trackingsend = $Result.DefaultSelection<Prisma.$trackingsendPayload>
/**
 * Model trackingexp
 * 
 */
export type trackingexp = $Result.DefaultSelection<Prisma.$trackingexpPayload>
/**
 * Model category
 * 
 */
export type category = $Result.DefaultSelection<Prisma.$categoryPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brach`: Exposes CRUD operations for the **brach** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Braches
    * const braches = await prisma.brach.findMany()
    * ```
    */
  get brach(): Prisma.brachDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trackingsell`: Exposes CRUD operations for the **trackingsell** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trackingsells
    * const trackingsells = await prisma.trackingsell.findMany()
    * ```
    */
  get trackingsell(): Prisma.trackingsellDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trackingsend`: Exposes CRUD operations for the **trackingsend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trackingsends
    * const trackingsends = await prisma.trackingsend.findMany()
    * ```
    */
  get trackingsend(): Prisma.trackingsendDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trackingexp`: Exposes CRUD operations for the **trackingexp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trackingexps
    * const trackingexps = await prisma.trackingexp.findMany()
    * ```
    */
  get trackingexp(): Prisma.trackingexpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    product: 'product',
    brach: 'brach',
    trackingsell: 'trackingsell',
    trackingsend: 'trackingsend',
    trackingexp: 'trackingexp',
    category: 'category'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "product" | "brach" | "trackingsell" | "trackingsend" | "trackingexp" | "category"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      product: {
        payload: Prisma.$productPayload<ExtArgs>
        fields: Prisma.productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findFirst: {
            args: Prisma.productFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findMany: {
            args: Prisma.productFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          create: {
            args: Prisma.productCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          createMany: {
            args: Prisma.productCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.productDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          update: {
            args: Prisma.productUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          deleteMany: {
            args: Prisma.productDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.productUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.productGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      brach: {
        payload: Prisma.$brachPayload<ExtArgs>
        fields: Prisma.brachFieldRefs
        operations: {
          findUnique: {
            args: Prisma.brachFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.brachFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload>
          }
          findFirst: {
            args: Prisma.brachFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.brachFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload>
          }
          findMany: {
            args: Prisma.brachFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload>[]
          }
          create: {
            args: Prisma.brachCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload>
          }
          createMany: {
            args: Prisma.brachCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.brachDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload>
          }
          update: {
            args: Prisma.brachUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload>
          }
          deleteMany: {
            args: Prisma.brachDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.brachUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.brachUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brachPayload>
          }
          aggregate: {
            args: Prisma.BrachAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrach>
          }
          groupBy: {
            args: Prisma.brachGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrachGroupByOutputType>[]
          }
          count: {
            args: Prisma.brachCountArgs<ExtArgs>
            result: $Utils.Optional<BrachCountAggregateOutputType> | number
          }
        }
      }
      trackingsell: {
        payload: Prisma.$trackingsellPayload<ExtArgs>
        fields: Prisma.trackingsellFieldRefs
        operations: {
          findUnique: {
            args: Prisma.trackingsellFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.trackingsellFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload>
          }
          findFirst: {
            args: Prisma.trackingsellFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.trackingsellFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload>
          }
          findMany: {
            args: Prisma.trackingsellFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload>[]
          }
          create: {
            args: Prisma.trackingsellCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload>
          }
          createMany: {
            args: Prisma.trackingsellCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.trackingsellDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload>
          }
          update: {
            args: Prisma.trackingsellUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload>
          }
          deleteMany: {
            args: Prisma.trackingsellDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.trackingsellUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.trackingsellUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsellPayload>
          }
          aggregate: {
            args: Prisma.TrackingsellAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrackingsell>
          }
          groupBy: {
            args: Prisma.trackingsellGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackingsellGroupByOutputType>[]
          }
          count: {
            args: Prisma.trackingsellCountArgs<ExtArgs>
            result: $Utils.Optional<TrackingsellCountAggregateOutputType> | number
          }
        }
      }
      trackingsend: {
        payload: Prisma.$trackingsendPayload<ExtArgs>
        fields: Prisma.trackingsendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.trackingsendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.trackingsendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload>
          }
          findFirst: {
            args: Prisma.trackingsendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.trackingsendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload>
          }
          findMany: {
            args: Prisma.trackingsendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload>[]
          }
          create: {
            args: Prisma.trackingsendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload>
          }
          createMany: {
            args: Prisma.trackingsendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.trackingsendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload>
          }
          update: {
            args: Prisma.trackingsendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload>
          }
          deleteMany: {
            args: Prisma.trackingsendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.trackingsendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.trackingsendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingsendPayload>
          }
          aggregate: {
            args: Prisma.TrackingsendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrackingsend>
          }
          groupBy: {
            args: Prisma.trackingsendGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackingsendGroupByOutputType>[]
          }
          count: {
            args: Prisma.trackingsendCountArgs<ExtArgs>
            result: $Utils.Optional<TrackingsendCountAggregateOutputType> | number
          }
        }
      }
      trackingexp: {
        payload: Prisma.$trackingexpPayload<ExtArgs>
        fields: Prisma.trackingexpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.trackingexpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.trackingexpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload>
          }
          findFirst: {
            args: Prisma.trackingexpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.trackingexpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload>
          }
          findMany: {
            args: Prisma.trackingexpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload>[]
          }
          create: {
            args: Prisma.trackingexpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload>
          }
          createMany: {
            args: Prisma.trackingexpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.trackingexpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload>
          }
          update: {
            args: Prisma.trackingexpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload>
          }
          deleteMany: {
            args: Prisma.trackingexpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.trackingexpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.trackingexpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$trackingexpPayload>
          }
          aggregate: {
            args: Prisma.TrackingexpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrackingexp>
          }
          groupBy: {
            args: Prisma.trackingexpGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackingexpGroupByOutputType>[]
          }
          count: {
            args: Prisma.trackingexpCountArgs<ExtArgs>
            result: $Utils.Optional<TrackingexpCountAggregateOutputType> | number
          }
        }
      }
      category: {
        payload: Prisma.$categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    product?: productOmit
    brach?: brachOmit
    trackingsell?: trackingsellOmit
    trackingsend?: trackingsendOmit
    trackingexp?: trackingexpOmit
    category?: categoryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    tracksell: number
    tracksend: number
    trackexp: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracksell?: boolean | UserCountOutputTypeCountTracksellArgs
    tracksend?: boolean | UserCountOutputTypeCountTracksendArgs
    trackexp?: boolean | UserCountOutputTypeCountTrackexpArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTracksellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsellWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTracksendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsendWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrackexpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingexpWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    tracksell: number
    tracksend: number
    trackexp: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracksell?: boolean | ProductCountOutputTypeCountTracksellArgs
    tracksend?: boolean | ProductCountOutputTypeCountTracksendArgs
    trackexp?: boolean | ProductCountOutputTypeCountTrackexpArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountTracksellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsellWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountTracksendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsendWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountTrackexpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingexpWhereInput
  }


  /**
   * Count Type BrachCountOutputType
   */

  export type BrachCountOutputType = {
    tracsell: number
    tracksend: number
    trackexp: number
  }

  export type BrachCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracsell?: boolean | BrachCountOutputTypeCountTracsellArgs
    tracksend?: boolean | BrachCountOutputTypeCountTracksendArgs
    trackexp?: boolean | BrachCountOutputTypeCountTrackexpArgs
  }

  // Custom InputTypes
  /**
   * BrachCountOutputType without action
   */
  export type BrachCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrachCountOutputType
     */
    select?: BrachCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrachCountOutputType without action
   */
  export type BrachCountOutputTypeCountTracsellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsellWhereInput
  }

  /**
   * BrachCountOutputType without action
   */
  export type BrachCountOutputTypeCountTracksendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsendWhereInput
  }

  /**
   * BrachCountOutputType without action
   */
  export type BrachCountOutputTypeCountTrackexpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingexpWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    product: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | CategoryCountOutputTypeCountProductArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    password: string | null
    phonenumber: string | null
    role: string | null
    status: boolean | null
    birstDate: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    password: string | null
    phonenumber: string | null
    role: string | null
    status: boolean | null
    birstDate: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    password: number
    phonenumber: number
    role: number
    status: number
    birstDate: number
    image: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    password?: true
    phonenumber?: true
    role?: true
    status?: true
    birstDate?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    password?: true
    phonenumber?: true
    role?: true
    status?: true
    birstDate?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    password?: true
    phonenumber?: true
    role?: true
    status?: true
    birstDate?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstname: string
    lastname: string
    password: string
    phonenumber: string
    role: string
    status: boolean
    birstDate: Date
    image: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    password?: boolean
    phonenumber?: boolean
    role?: boolean
    status?: boolean
    birstDate?: boolean
    image?: boolean
    tracksell?: boolean | User$tracksellArgs<ExtArgs>
    tracksend?: boolean | User$tracksendArgs<ExtArgs>
    trackexp?: boolean | User$trackexpArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    password?: boolean
    phonenumber?: boolean
    role?: boolean
    status?: boolean
    birstDate?: boolean
    image?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstname" | "lastname" | "password" | "phonenumber" | "role" | "status" | "birstDate" | "image", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracksell?: boolean | User$tracksellArgs<ExtArgs>
    tracksend?: boolean | User$tracksendArgs<ExtArgs>
    trackexp?: boolean | User$trackexpArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      tracksell: Prisma.$trackingsellPayload<ExtArgs>[]
      tracksend: Prisma.$trackingsendPayload<ExtArgs>[]
      trackexp: Prisma.$trackingexpPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstname: string
      lastname: string
      password: string
      phonenumber: string
      role: string
      status: boolean
      birstDate: Date
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tracksell<T extends User$tracksellArgs<ExtArgs> = {}>(args?: Subset<T, User$tracksellArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tracksend<T extends User$tracksendArgs<ExtArgs> = {}>(args?: Subset<T, User$tracksendArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trackexp<T extends User$trackexpArgs<ExtArgs> = {}>(args?: Subset<T, User$trackexpArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phonenumber: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'Boolean'>
    readonly birstDate: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.tracksell
   */
  export type User$tracksellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    where?: trackingsellWhereInput
    orderBy?: trackingsellOrderByWithRelationInput | trackingsellOrderByWithRelationInput[]
    cursor?: trackingsellWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingsellScalarFieldEnum | TrackingsellScalarFieldEnum[]
  }

  /**
   * User.tracksend
   */
  export type User$tracksendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    where?: trackingsendWhereInput
    orderBy?: trackingsendOrderByWithRelationInput | trackingsendOrderByWithRelationInput[]
    cursor?: trackingsendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingsendScalarFieldEnum | TrackingsendScalarFieldEnum[]
  }

  /**
   * User.trackexp
   */
  export type User$trackexpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    where?: trackingexpWhereInput
    orderBy?: trackingexpOrderByWithRelationInput | trackingexpOrderByWithRelationInput[]
    cursor?: trackingexpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingexpScalarFieldEnum | TrackingexpScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    sellprice: number | null
    lifetime: number | null
    categoryId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    sellprice: number | null
    lifetime: number | null
    categoryId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    sellprice: number | null
    lifetime: number | null
    image: string | null
    categoryId: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    sellprice: number | null
    lifetime: number | null
    image: string | null
    categoryId: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    price: number
    sellprice: number
    lifetime: number
    image: number
    categoryId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    sellprice?: true
    lifetime?: true
    categoryId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    sellprice?: true
    lifetime?: true
    categoryId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    sellprice?: true
    lifetime?: true
    image?: true
    categoryId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    sellprice?: true
    lifetime?: true
    image?: true
    categoryId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    sellprice?: true
    lifetime?: true
    image?: true
    categoryId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type productGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
    orderBy?: productOrderByWithAggregationInput | productOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    price: number
    sellprice: number
    lifetime: number
    image: string | null
    categoryId: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    sellprice?: boolean
    lifetime?: boolean
    image?: boolean
    categoryId?: boolean
    tracksell?: boolean | product$tracksellArgs<ExtArgs>
    tracksend?: boolean | product$tracksendArgs<ExtArgs>
    trackexp?: boolean | product$trackexpArgs<ExtArgs>
    category?: boolean | categoryDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>



  export type productSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    sellprice?: boolean
    lifetime?: boolean
    image?: boolean
    categoryId?: boolean
  }

  export type productOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price" | "sellprice" | "lifetime" | "image" | "categoryId", ExtArgs["result"]["product"]>
  export type productInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracksell?: boolean | product$tracksellArgs<ExtArgs>
    tracksend?: boolean | product$tracksendArgs<ExtArgs>
    trackexp?: boolean | product$trackexpArgs<ExtArgs>
    category?: boolean | categoryDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $productPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product"
    objects: {
      tracksell: Prisma.$trackingsellPayload<ExtArgs>[]
      tracksend: Prisma.$trackingsendPayload<ExtArgs>[]
      trackexp: Prisma.$trackingexpPayload<ExtArgs>[]
      category: Prisma.$categoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: number
      sellprice: number
      lifetime: number
      image: string | null
      categoryId: number
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type productGetPayload<S extends boolean | null | undefined | productDefaultArgs> = $Result.GetResult<Prisma.$productPayload, S>

  type productCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productFindUniqueArgs>(args: SelectSubset<T, productFindUniqueArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(args: SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productFindFirstArgs>(args?: SelectSubset<T, productFindFirstArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(args?: SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productFindManyArgs>(args?: SelectSubset<T, productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends productCreateArgs>(args: SelectSubset<T, productCreateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {productCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productCreateManyArgs>(args?: SelectSubset<T, productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends productDeleteArgs>(args: SelectSubset<T, productDeleteArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productUpdateArgs>(args: SelectSubset<T, productUpdateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productDeleteManyArgs>(args?: SelectSubset<T, productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productUpdateManyArgs>(args: SelectSubset<T, productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends productUpsertArgs>(args: SelectSubset<T, productUpsertArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGroupByArgs['orderBy'] }
        : { orderBy?: productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product model
   */
  readonly fields: productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tracksell<T extends product$tracksellArgs<ExtArgs> = {}>(args?: Subset<T, product$tracksellArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tracksend<T extends product$tracksendArgs<ExtArgs> = {}>(args?: Subset<T, product$tracksendArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trackexp<T extends product$trackexpArgs<ExtArgs> = {}>(args?: Subset<T, product$trackexpArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    category<T extends categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoryDefaultArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product model
   */ 
  interface productFieldRefs {
    readonly id: FieldRef<"product", 'Int'>
    readonly name: FieldRef<"product", 'String'>
    readonly price: FieldRef<"product", 'Int'>
    readonly sellprice: FieldRef<"product", 'Int'>
    readonly lifetime: FieldRef<"product", 'Int'>
    readonly image: FieldRef<"product", 'String'>
    readonly categoryId: FieldRef<"product", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * product findUnique
   */
  export type productFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findFirst
   */
  export type productFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findMany
   */
  export type productFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product create
   */
  export type productCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }

  /**
   * product createMany
   */
  export type productCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product update
   */
  export type productUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }

  /**
   * product updateMany
   */
  export type productUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
    /**
     * Limit how many products to update.
     */
    limit?: number
  }

  /**
   * product upsert
   */
  export type productUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }

  /**
   * product delete
   */
  export type productDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }

  /**
   * product deleteMany
   */
  export type productDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
    /**
     * Limit how many products to delete.
     */
    limit?: number
  }

  /**
   * product.tracksell
   */
  export type product$tracksellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    where?: trackingsellWhereInput
    orderBy?: trackingsellOrderByWithRelationInput | trackingsellOrderByWithRelationInput[]
    cursor?: trackingsellWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingsellScalarFieldEnum | TrackingsellScalarFieldEnum[]
  }

  /**
   * product.tracksend
   */
  export type product$tracksendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    where?: trackingsendWhereInput
    orderBy?: trackingsendOrderByWithRelationInput | trackingsendOrderByWithRelationInput[]
    cursor?: trackingsendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingsendScalarFieldEnum | TrackingsendScalarFieldEnum[]
  }

  /**
   * product.trackexp
   */
  export type product$trackexpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    where?: trackingexpWhereInput
    orderBy?: trackingexpOrderByWithRelationInput | trackingexpOrderByWithRelationInput[]
    cursor?: trackingexpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingexpScalarFieldEnum | TrackingexpScalarFieldEnum[]
  }

  /**
   * product without action
   */
  export type productDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
  }


  /**
   * Model brach
   */

  export type AggregateBrach = {
    _count: BrachCountAggregateOutputType | null
    _avg: BrachAvgAggregateOutputType | null
    _sum: BrachSumAggregateOutputType | null
    _min: BrachMinAggregateOutputType | null
    _max: BrachMaxAggregateOutputType | null
  }

  export type BrachAvgAggregateOutputType = {
    id: number | null
  }

  export type BrachSumAggregateOutputType = {
    id: number | null
  }

  export type BrachMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BrachMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type BrachCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BrachAvgAggregateInputType = {
    id?: true
  }

  export type BrachSumAggregateInputType = {
    id?: true
  }

  export type BrachMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrachMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BrachCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BrachAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which brach to aggregate.
     */
    where?: brachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of braches to fetch.
     */
    orderBy?: brachOrderByWithRelationInput | brachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: brachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` braches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` braches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned braches
    **/
    _count?: true | BrachCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BrachAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BrachSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrachMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrachMaxAggregateInputType
  }

  export type GetBrachAggregateType<T extends BrachAggregateArgs> = {
        [P in keyof T & keyof AggregateBrach]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrach[P]>
      : GetScalarType<T[P], AggregateBrach[P]>
  }




  export type brachGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: brachWhereInput
    orderBy?: brachOrderByWithAggregationInput | brachOrderByWithAggregationInput[]
    by: BrachScalarFieldEnum[] | BrachScalarFieldEnum
    having?: brachScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrachCountAggregateInputType | true
    _avg?: BrachAvgAggregateInputType
    _sum?: BrachSumAggregateInputType
    _min?: BrachMinAggregateInputType
    _max?: BrachMaxAggregateInputType
  }

  export type BrachGroupByOutputType = {
    id: number
    name: string
    _count: BrachCountAggregateOutputType | null
    _avg: BrachAvgAggregateOutputType | null
    _sum: BrachSumAggregateOutputType | null
    _min: BrachMinAggregateOutputType | null
    _max: BrachMaxAggregateOutputType | null
  }

  type GetBrachGroupByPayload<T extends brachGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrachGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrachGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrachGroupByOutputType[P]>
            : GetScalarType<T[P], BrachGroupByOutputType[P]>
        }
      >
    >


  export type brachSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tracsell?: boolean | brach$tracsellArgs<ExtArgs>
    tracksend?: boolean | brach$tracksendArgs<ExtArgs>
    trackexp?: boolean | brach$trackexpArgs<ExtArgs>
    _count?: boolean | BrachCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brach"]>



  export type brachSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type brachOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["brach"]>
  export type brachInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracsell?: boolean | brach$tracsellArgs<ExtArgs>
    tracksend?: boolean | brach$tracksendArgs<ExtArgs>
    trackexp?: boolean | brach$trackexpArgs<ExtArgs>
    _count?: boolean | BrachCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $brachPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "brach"
    objects: {
      tracsell: Prisma.$trackingsellPayload<ExtArgs>[]
      tracksend: Prisma.$trackingsendPayload<ExtArgs>[]
      trackexp: Prisma.$trackingexpPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["brach"]>
    composites: {}
  }

  type brachGetPayload<S extends boolean | null | undefined | brachDefaultArgs> = $Result.GetResult<Prisma.$brachPayload, S>

  type brachCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<brachFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrachCountAggregateInputType | true
    }

  export interface brachDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['brach'], meta: { name: 'brach' } }
    /**
     * Find zero or one Brach that matches the filter.
     * @param {brachFindUniqueArgs} args - Arguments to find a Brach
     * @example
     * // Get one Brach
     * const brach = await prisma.brach.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends brachFindUniqueArgs>(args: SelectSubset<T, brachFindUniqueArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brach that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {brachFindUniqueOrThrowArgs} args - Arguments to find a Brach
     * @example
     * // Get one Brach
     * const brach = await prisma.brach.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends brachFindUniqueOrThrowArgs>(args: SelectSubset<T, brachFindUniqueOrThrowArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brach that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brachFindFirstArgs} args - Arguments to find a Brach
     * @example
     * // Get one Brach
     * const brach = await prisma.brach.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends brachFindFirstArgs>(args?: SelectSubset<T, brachFindFirstArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brach that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brachFindFirstOrThrowArgs} args - Arguments to find a Brach
     * @example
     * // Get one Brach
     * const brach = await prisma.brach.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends brachFindFirstOrThrowArgs>(args?: SelectSubset<T, brachFindFirstOrThrowArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Braches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brachFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Braches
     * const braches = await prisma.brach.findMany()
     * 
     * // Get first 10 Braches
     * const braches = await prisma.brach.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brachWithIdOnly = await prisma.brach.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends brachFindManyArgs>(args?: SelectSubset<T, brachFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brach.
     * @param {brachCreateArgs} args - Arguments to create a Brach.
     * @example
     * // Create one Brach
     * const Brach = await prisma.brach.create({
     *   data: {
     *     // ... data to create a Brach
     *   }
     * })
     * 
     */
    create<T extends brachCreateArgs>(args: SelectSubset<T, brachCreateArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Braches.
     * @param {brachCreateManyArgs} args - Arguments to create many Braches.
     * @example
     * // Create many Braches
     * const brach = await prisma.brach.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends brachCreateManyArgs>(args?: SelectSubset<T, brachCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brach.
     * @param {brachDeleteArgs} args - Arguments to delete one Brach.
     * @example
     * // Delete one Brach
     * const Brach = await prisma.brach.delete({
     *   where: {
     *     // ... filter to delete one Brach
     *   }
     * })
     * 
     */
    delete<T extends brachDeleteArgs>(args: SelectSubset<T, brachDeleteArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brach.
     * @param {brachUpdateArgs} args - Arguments to update one Brach.
     * @example
     * // Update one Brach
     * const brach = await prisma.brach.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends brachUpdateArgs>(args: SelectSubset<T, brachUpdateArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Braches.
     * @param {brachDeleteManyArgs} args - Arguments to filter Braches to delete.
     * @example
     * // Delete a few Braches
     * const { count } = await prisma.brach.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends brachDeleteManyArgs>(args?: SelectSubset<T, brachDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Braches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brachUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Braches
     * const brach = await prisma.brach.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends brachUpdateManyArgs>(args: SelectSubset<T, brachUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brach.
     * @param {brachUpsertArgs} args - Arguments to update or create a Brach.
     * @example
     * // Update or create a Brach
     * const brach = await prisma.brach.upsert({
     *   create: {
     *     // ... data to create a Brach
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brach we want to update
     *   }
     * })
     */
    upsert<T extends brachUpsertArgs>(args: SelectSubset<T, brachUpsertArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Braches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brachCountArgs} args - Arguments to filter Braches to count.
     * @example
     * // Count the number of Braches
     * const count = await prisma.brach.count({
     *   where: {
     *     // ... the filter for the Braches we want to count
     *   }
     * })
    **/
    count<T extends brachCountArgs>(
      args?: Subset<T, brachCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrachCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrachAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrachAggregateArgs>(args: Subset<T, BrachAggregateArgs>): Prisma.PrismaPromise<GetBrachAggregateType<T>>

    /**
     * Group by Brach.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brachGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends brachGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: brachGroupByArgs['orderBy'] }
        : { orderBy?: brachGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, brachGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrachGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the brach model
   */
  readonly fields: brachFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for brach.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__brachClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tracsell<T extends brach$tracsellArgs<ExtArgs> = {}>(args?: Subset<T, brach$tracsellArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tracksend<T extends brach$tracksendArgs<ExtArgs> = {}>(args?: Subset<T, brach$tracksendArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trackexp<T extends brach$trackexpArgs<ExtArgs> = {}>(args?: Subset<T, brach$trackexpArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the brach model
   */ 
  interface brachFieldRefs {
    readonly id: FieldRef<"brach", 'Int'>
    readonly name: FieldRef<"brach", 'String'>
  }
    

  // Custom InputTypes
  /**
   * brach findUnique
   */
  export type brachFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * Filter, which brach to fetch.
     */
    where: brachWhereUniqueInput
  }

  /**
   * brach findUniqueOrThrow
   */
  export type brachFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * Filter, which brach to fetch.
     */
    where: brachWhereUniqueInput
  }

  /**
   * brach findFirst
   */
  export type brachFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * Filter, which brach to fetch.
     */
    where?: brachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of braches to fetch.
     */
    orderBy?: brachOrderByWithRelationInput | brachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for braches.
     */
    cursor?: brachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` braches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` braches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of braches.
     */
    distinct?: BrachScalarFieldEnum | BrachScalarFieldEnum[]
  }

  /**
   * brach findFirstOrThrow
   */
  export type brachFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * Filter, which brach to fetch.
     */
    where?: brachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of braches to fetch.
     */
    orderBy?: brachOrderByWithRelationInput | brachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for braches.
     */
    cursor?: brachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` braches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` braches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of braches.
     */
    distinct?: BrachScalarFieldEnum | BrachScalarFieldEnum[]
  }

  /**
   * brach findMany
   */
  export type brachFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * Filter, which braches to fetch.
     */
    where?: brachWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of braches to fetch.
     */
    orderBy?: brachOrderByWithRelationInput | brachOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing braches.
     */
    cursor?: brachWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` braches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` braches.
     */
    skip?: number
    distinct?: BrachScalarFieldEnum | BrachScalarFieldEnum[]
  }

  /**
   * brach create
   */
  export type brachCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * The data needed to create a brach.
     */
    data: XOR<brachCreateInput, brachUncheckedCreateInput>
  }

  /**
   * brach createMany
   */
  export type brachCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many braches.
     */
    data: brachCreateManyInput | brachCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * brach update
   */
  export type brachUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * The data needed to update a brach.
     */
    data: XOR<brachUpdateInput, brachUncheckedUpdateInput>
    /**
     * Choose, which brach to update.
     */
    where: brachWhereUniqueInput
  }

  /**
   * brach updateMany
   */
  export type brachUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update braches.
     */
    data: XOR<brachUpdateManyMutationInput, brachUncheckedUpdateManyInput>
    /**
     * Filter which braches to update
     */
    where?: brachWhereInput
    /**
     * Limit how many braches to update.
     */
    limit?: number
  }

  /**
   * brach upsert
   */
  export type brachUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * The filter to search for the brach to update in case it exists.
     */
    where: brachWhereUniqueInput
    /**
     * In case the brach found by the `where` argument doesn't exist, create a new brach with this data.
     */
    create: XOR<brachCreateInput, brachUncheckedCreateInput>
    /**
     * In case the brach was found with the provided `where` argument, update it with this data.
     */
    update: XOR<brachUpdateInput, brachUncheckedUpdateInput>
  }

  /**
   * brach delete
   */
  export type brachDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
    /**
     * Filter which brach to delete.
     */
    where: brachWhereUniqueInput
  }

  /**
   * brach deleteMany
   */
  export type brachDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which braches to delete
     */
    where?: brachWhereInput
    /**
     * Limit how many braches to delete.
     */
    limit?: number
  }

  /**
   * brach.tracsell
   */
  export type brach$tracsellArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    where?: trackingsellWhereInput
    orderBy?: trackingsellOrderByWithRelationInput | trackingsellOrderByWithRelationInput[]
    cursor?: trackingsellWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingsellScalarFieldEnum | TrackingsellScalarFieldEnum[]
  }

  /**
   * brach.tracksend
   */
  export type brach$tracksendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    where?: trackingsendWhereInput
    orderBy?: trackingsendOrderByWithRelationInput | trackingsendOrderByWithRelationInput[]
    cursor?: trackingsendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingsendScalarFieldEnum | TrackingsendScalarFieldEnum[]
  }

  /**
   * brach.trackexp
   */
  export type brach$trackexpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    where?: trackingexpWhereInput
    orderBy?: trackingexpOrderByWithRelationInput | trackingexpOrderByWithRelationInput[]
    cursor?: trackingexpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackingexpScalarFieldEnum | TrackingexpScalarFieldEnum[]
  }

  /**
   * brach without action
   */
  export type brachDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brach
     */
    select?: brachSelect<ExtArgs> | null
    /**
     * Omit specific fields from the brach
     */
    omit?: brachOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brachInclude<ExtArgs> | null
  }


  /**
   * Model trackingsell
   */

  export type AggregateTrackingsell = {
    _count: TrackingsellCountAggregateOutputType | null
    _avg: TrackingsellAvgAggregateOutputType | null
    _sum: TrackingsellSumAggregateOutputType | null
    _min: TrackingsellMinAggregateOutputType | null
    _max: TrackingsellMaxAggregateOutputType | null
  }

  export type TrackingsellAvgAggregateOutputType = {
    id: number | null
    sellCount: number | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsellSumAggregateOutputType = {
    id: number | null
    sellCount: number | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsellMinAggregateOutputType = {
    id: number | null
    sellCount: number | null
    sellAt: Date | null
    sellDay: string | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsellMaxAggregateOutputType = {
    id: number | null
    sellCount: number | null
    sellAt: Date | null
    sellDay: string | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsellCountAggregateOutputType = {
    id: number
    sellCount: number
    sellAt: number
    sellDay: number
    userId: number
    productId: number
    brachId: number
    _all: number
  }


  export type TrackingsellAvgAggregateInputType = {
    id?: true
    sellCount?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsellSumAggregateInputType = {
    id?: true
    sellCount?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsellMinAggregateInputType = {
    id?: true
    sellCount?: true
    sellAt?: true
    sellDay?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsellMaxAggregateInputType = {
    id?: true
    sellCount?: true
    sellAt?: true
    sellDay?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsellCountAggregateInputType = {
    id?: true
    sellCount?: true
    sellAt?: true
    sellDay?: true
    userId?: true
    productId?: true
    brachId?: true
    _all?: true
  }

  export type TrackingsellAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trackingsell to aggregate.
     */
    where?: trackingsellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsells to fetch.
     */
    orderBy?: trackingsellOrderByWithRelationInput | trackingsellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: trackingsellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trackingsells
    **/
    _count?: true | TrackingsellCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackingsellAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackingsellSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackingsellMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackingsellMaxAggregateInputType
  }

  export type GetTrackingsellAggregateType<T extends TrackingsellAggregateArgs> = {
        [P in keyof T & keyof AggregateTrackingsell]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrackingsell[P]>
      : GetScalarType<T[P], AggregateTrackingsell[P]>
  }




  export type trackingsellGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsellWhereInput
    orderBy?: trackingsellOrderByWithAggregationInput | trackingsellOrderByWithAggregationInput[]
    by: TrackingsellScalarFieldEnum[] | TrackingsellScalarFieldEnum
    having?: trackingsellScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackingsellCountAggregateInputType | true
    _avg?: TrackingsellAvgAggregateInputType
    _sum?: TrackingsellSumAggregateInputType
    _min?: TrackingsellMinAggregateInputType
    _max?: TrackingsellMaxAggregateInputType
  }

  export type TrackingsellGroupByOutputType = {
    id: number
    sellCount: number
    sellAt: Date
    sellDay: string
    userId: number
    productId: number
    brachId: number
    _count: TrackingsellCountAggregateOutputType | null
    _avg: TrackingsellAvgAggregateOutputType | null
    _sum: TrackingsellSumAggregateOutputType | null
    _min: TrackingsellMinAggregateOutputType | null
    _max: TrackingsellMaxAggregateOutputType | null
  }

  type GetTrackingsellGroupByPayload<T extends trackingsellGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackingsellGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackingsellGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackingsellGroupByOutputType[P]>
            : GetScalarType<T[P], TrackingsellGroupByOutputType[P]>
        }
      >
    >


  export type trackingsellSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sellCount?: boolean
    sellAt?: boolean
    sellDay?: boolean
    userId?: boolean
    productId?: boolean
    brachId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    brach?: boolean | brachDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackingsell"]>



  export type trackingsellSelectScalar = {
    id?: boolean
    sellCount?: boolean
    sellAt?: boolean
    sellDay?: boolean
    userId?: boolean
    productId?: boolean
    brachId?: boolean
  }

  export type trackingsellOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sellCount" | "sellAt" | "sellDay" | "userId" | "productId" | "brachId", ExtArgs["result"]["trackingsell"]>
  export type trackingsellInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    brach?: boolean | brachDefaultArgs<ExtArgs>
  }

  export type $trackingsellPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trackingsell"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
      brach: Prisma.$brachPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sellCount: number
      sellAt: Date
      sellDay: string
      userId: number
      productId: number
      brachId: number
    }, ExtArgs["result"]["trackingsell"]>
    composites: {}
  }

  type trackingsellGetPayload<S extends boolean | null | undefined | trackingsellDefaultArgs> = $Result.GetResult<Prisma.$trackingsellPayload, S>

  type trackingsellCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<trackingsellFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrackingsellCountAggregateInputType | true
    }

  export interface trackingsellDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trackingsell'], meta: { name: 'trackingsell' } }
    /**
     * Find zero or one Trackingsell that matches the filter.
     * @param {trackingsellFindUniqueArgs} args - Arguments to find a Trackingsell
     * @example
     * // Get one Trackingsell
     * const trackingsell = await prisma.trackingsell.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends trackingsellFindUniqueArgs>(args: SelectSubset<T, trackingsellFindUniqueArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trackingsell that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {trackingsellFindUniqueOrThrowArgs} args - Arguments to find a Trackingsell
     * @example
     * // Get one Trackingsell
     * const trackingsell = await prisma.trackingsell.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends trackingsellFindUniqueOrThrowArgs>(args: SelectSubset<T, trackingsellFindUniqueOrThrowArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trackingsell that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsellFindFirstArgs} args - Arguments to find a Trackingsell
     * @example
     * // Get one Trackingsell
     * const trackingsell = await prisma.trackingsell.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends trackingsellFindFirstArgs>(args?: SelectSubset<T, trackingsellFindFirstArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trackingsell that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsellFindFirstOrThrowArgs} args - Arguments to find a Trackingsell
     * @example
     * // Get one Trackingsell
     * const trackingsell = await prisma.trackingsell.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends trackingsellFindFirstOrThrowArgs>(args?: SelectSubset<T, trackingsellFindFirstOrThrowArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trackingsells that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsellFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trackingsells
     * const trackingsells = await prisma.trackingsell.findMany()
     * 
     * // Get first 10 Trackingsells
     * const trackingsells = await prisma.trackingsell.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackingsellWithIdOnly = await prisma.trackingsell.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends trackingsellFindManyArgs>(args?: SelectSubset<T, trackingsellFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trackingsell.
     * @param {trackingsellCreateArgs} args - Arguments to create a Trackingsell.
     * @example
     * // Create one Trackingsell
     * const Trackingsell = await prisma.trackingsell.create({
     *   data: {
     *     // ... data to create a Trackingsell
     *   }
     * })
     * 
     */
    create<T extends trackingsellCreateArgs>(args: SelectSubset<T, trackingsellCreateArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trackingsells.
     * @param {trackingsellCreateManyArgs} args - Arguments to create many Trackingsells.
     * @example
     * // Create many Trackingsells
     * const trackingsell = await prisma.trackingsell.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends trackingsellCreateManyArgs>(args?: SelectSubset<T, trackingsellCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trackingsell.
     * @param {trackingsellDeleteArgs} args - Arguments to delete one Trackingsell.
     * @example
     * // Delete one Trackingsell
     * const Trackingsell = await prisma.trackingsell.delete({
     *   where: {
     *     // ... filter to delete one Trackingsell
     *   }
     * })
     * 
     */
    delete<T extends trackingsellDeleteArgs>(args: SelectSubset<T, trackingsellDeleteArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trackingsell.
     * @param {trackingsellUpdateArgs} args - Arguments to update one Trackingsell.
     * @example
     * // Update one Trackingsell
     * const trackingsell = await prisma.trackingsell.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends trackingsellUpdateArgs>(args: SelectSubset<T, trackingsellUpdateArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trackingsells.
     * @param {trackingsellDeleteManyArgs} args - Arguments to filter Trackingsells to delete.
     * @example
     * // Delete a few Trackingsells
     * const { count } = await prisma.trackingsell.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends trackingsellDeleteManyArgs>(args?: SelectSubset<T, trackingsellDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trackingsells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsellUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trackingsells
     * const trackingsell = await prisma.trackingsell.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends trackingsellUpdateManyArgs>(args: SelectSubset<T, trackingsellUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trackingsell.
     * @param {trackingsellUpsertArgs} args - Arguments to update or create a Trackingsell.
     * @example
     * // Update or create a Trackingsell
     * const trackingsell = await prisma.trackingsell.upsert({
     *   create: {
     *     // ... data to create a Trackingsell
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trackingsell we want to update
     *   }
     * })
     */
    upsert<T extends trackingsellUpsertArgs>(args: SelectSubset<T, trackingsellUpsertArgs<ExtArgs>>): Prisma__trackingsellClient<$Result.GetResult<Prisma.$trackingsellPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trackingsells.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsellCountArgs} args - Arguments to filter Trackingsells to count.
     * @example
     * // Count the number of Trackingsells
     * const count = await prisma.trackingsell.count({
     *   where: {
     *     // ... the filter for the Trackingsells we want to count
     *   }
     * })
    **/
    count<T extends trackingsellCountArgs>(
      args?: Subset<T, trackingsellCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackingsellCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trackingsell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingsellAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackingsellAggregateArgs>(args: Subset<T, TrackingsellAggregateArgs>): Prisma.PrismaPromise<GetTrackingsellAggregateType<T>>

    /**
     * Group by Trackingsell.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsellGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends trackingsellGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: trackingsellGroupByArgs['orderBy'] }
        : { orderBy?: trackingsellGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, trackingsellGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackingsellGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trackingsell model
   */
  readonly fields: trackingsellFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trackingsell.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__trackingsellClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    brach<T extends brachDefaultArgs<ExtArgs> = {}>(args?: Subset<T, brachDefaultArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the trackingsell model
   */ 
  interface trackingsellFieldRefs {
    readonly id: FieldRef<"trackingsell", 'Int'>
    readonly sellCount: FieldRef<"trackingsell", 'Int'>
    readonly sellAt: FieldRef<"trackingsell", 'DateTime'>
    readonly sellDay: FieldRef<"trackingsell", 'String'>
    readonly userId: FieldRef<"trackingsell", 'Int'>
    readonly productId: FieldRef<"trackingsell", 'Int'>
    readonly brachId: FieldRef<"trackingsell", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * trackingsell findUnique
   */
  export type trackingsellFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * Filter, which trackingsell to fetch.
     */
    where: trackingsellWhereUniqueInput
  }

  /**
   * trackingsell findUniqueOrThrow
   */
  export type trackingsellFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * Filter, which trackingsell to fetch.
     */
    where: trackingsellWhereUniqueInput
  }

  /**
   * trackingsell findFirst
   */
  export type trackingsellFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * Filter, which trackingsell to fetch.
     */
    where?: trackingsellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsells to fetch.
     */
    orderBy?: trackingsellOrderByWithRelationInput | trackingsellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trackingsells.
     */
    cursor?: trackingsellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trackingsells.
     */
    distinct?: TrackingsellScalarFieldEnum | TrackingsellScalarFieldEnum[]
  }

  /**
   * trackingsell findFirstOrThrow
   */
  export type trackingsellFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * Filter, which trackingsell to fetch.
     */
    where?: trackingsellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsells to fetch.
     */
    orderBy?: trackingsellOrderByWithRelationInput | trackingsellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trackingsells.
     */
    cursor?: trackingsellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsells.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trackingsells.
     */
    distinct?: TrackingsellScalarFieldEnum | TrackingsellScalarFieldEnum[]
  }

  /**
   * trackingsell findMany
   */
  export type trackingsellFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * Filter, which trackingsells to fetch.
     */
    where?: trackingsellWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsells to fetch.
     */
    orderBy?: trackingsellOrderByWithRelationInput | trackingsellOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trackingsells.
     */
    cursor?: trackingsellWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsells from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsells.
     */
    skip?: number
    distinct?: TrackingsellScalarFieldEnum | TrackingsellScalarFieldEnum[]
  }

  /**
   * trackingsell create
   */
  export type trackingsellCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * The data needed to create a trackingsell.
     */
    data: XOR<trackingsellCreateInput, trackingsellUncheckedCreateInput>
  }

  /**
   * trackingsell createMany
   */
  export type trackingsellCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trackingsells.
     */
    data: trackingsellCreateManyInput | trackingsellCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * trackingsell update
   */
  export type trackingsellUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * The data needed to update a trackingsell.
     */
    data: XOR<trackingsellUpdateInput, trackingsellUncheckedUpdateInput>
    /**
     * Choose, which trackingsell to update.
     */
    where: trackingsellWhereUniqueInput
  }

  /**
   * trackingsell updateMany
   */
  export type trackingsellUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trackingsells.
     */
    data: XOR<trackingsellUpdateManyMutationInput, trackingsellUncheckedUpdateManyInput>
    /**
     * Filter which trackingsells to update
     */
    where?: trackingsellWhereInput
    /**
     * Limit how many trackingsells to update.
     */
    limit?: number
  }

  /**
   * trackingsell upsert
   */
  export type trackingsellUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * The filter to search for the trackingsell to update in case it exists.
     */
    where: trackingsellWhereUniqueInput
    /**
     * In case the trackingsell found by the `where` argument doesn't exist, create a new trackingsell with this data.
     */
    create: XOR<trackingsellCreateInput, trackingsellUncheckedCreateInput>
    /**
     * In case the trackingsell was found with the provided `where` argument, update it with this data.
     */
    update: XOR<trackingsellUpdateInput, trackingsellUncheckedUpdateInput>
  }

  /**
   * trackingsell delete
   */
  export type trackingsellDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
    /**
     * Filter which trackingsell to delete.
     */
    where: trackingsellWhereUniqueInput
  }

  /**
   * trackingsell deleteMany
   */
  export type trackingsellDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trackingsells to delete
     */
    where?: trackingsellWhereInput
    /**
     * Limit how many trackingsells to delete.
     */
    limit?: number
  }

  /**
   * trackingsell without action
   */
  export type trackingsellDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsell
     */
    select?: trackingsellSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsell
     */
    omit?: trackingsellOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsellInclude<ExtArgs> | null
  }


  /**
   * Model trackingsend
   */

  export type AggregateTrackingsend = {
    _count: TrackingsendCountAggregateOutputType | null
    _avg: TrackingsendAvgAggregateOutputType | null
    _sum: TrackingsendSumAggregateOutputType | null
    _min: TrackingsendMinAggregateOutputType | null
    _max: TrackingsendMaxAggregateOutputType | null
  }

  export type TrackingsendAvgAggregateOutputType = {
    id: number | null
    sendCount: number | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsendSumAggregateOutputType = {
    id: number | null
    sendCount: number | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsendMinAggregateOutputType = {
    id: number | null
    sendCount: number | null
    sendAt: Date | null
    sendDay: string | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsendMaxAggregateOutputType = {
    id: number | null
    sendCount: number | null
    sendAt: Date | null
    sendDay: string | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingsendCountAggregateOutputType = {
    id: number
    sendCount: number
    sendAt: number
    sendDay: number
    userId: number
    productId: number
    brachId: number
    _all: number
  }


  export type TrackingsendAvgAggregateInputType = {
    id?: true
    sendCount?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsendSumAggregateInputType = {
    id?: true
    sendCount?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsendMinAggregateInputType = {
    id?: true
    sendCount?: true
    sendAt?: true
    sendDay?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsendMaxAggregateInputType = {
    id?: true
    sendCount?: true
    sendAt?: true
    sendDay?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingsendCountAggregateInputType = {
    id?: true
    sendCount?: true
    sendAt?: true
    sendDay?: true
    userId?: true
    productId?: true
    brachId?: true
    _all?: true
  }

  export type TrackingsendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trackingsend to aggregate.
     */
    where?: trackingsendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsends to fetch.
     */
    orderBy?: trackingsendOrderByWithRelationInput | trackingsendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: trackingsendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trackingsends
    **/
    _count?: true | TrackingsendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackingsendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackingsendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackingsendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackingsendMaxAggregateInputType
  }

  export type GetTrackingsendAggregateType<T extends TrackingsendAggregateArgs> = {
        [P in keyof T & keyof AggregateTrackingsend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrackingsend[P]>
      : GetScalarType<T[P], AggregateTrackingsend[P]>
  }




  export type trackingsendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingsendWhereInput
    orderBy?: trackingsendOrderByWithAggregationInput | trackingsendOrderByWithAggregationInput[]
    by: TrackingsendScalarFieldEnum[] | TrackingsendScalarFieldEnum
    having?: trackingsendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackingsendCountAggregateInputType | true
    _avg?: TrackingsendAvgAggregateInputType
    _sum?: TrackingsendSumAggregateInputType
    _min?: TrackingsendMinAggregateInputType
    _max?: TrackingsendMaxAggregateInputType
  }

  export type TrackingsendGroupByOutputType = {
    id: number
    sendCount: number
    sendAt: Date
    sendDay: string
    userId: number
    productId: number
    brachId: number
    _count: TrackingsendCountAggregateOutputType | null
    _avg: TrackingsendAvgAggregateOutputType | null
    _sum: TrackingsendSumAggregateOutputType | null
    _min: TrackingsendMinAggregateOutputType | null
    _max: TrackingsendMaxAggregateOutputType | null
  }

  type GetTrackingsendGroupByPayload<T extends trackingsendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackingsendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackingsendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackingsendGroupByOutputType[P]>
            : GetScalarType<T[P], TrackingsendGroupByOutputType[P]>
        }
      >
    >


  export type trackingsendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sendCount?: boolean
    sendAt?: boolean
    sendDay?: boolean
    userId?: boolean
    productId?: boolean
    brachId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    brach?: boolean | brachDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackingsend"]>



  export type trackingsendSelectScalar = {
    id?: boolean
    sendCount?: boolean
    sendAt?: boolean
    sendDay?: boolean
    userId?: boolean
    productId?: boolean
    brachId?: boolean
  }

  export type trackingsendOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sendCount" | "sendAt" | "sendDay" | "userId" | "productId" | "brachId", ExtArgs["result"]["trackingsend"]>
  export type trackingsendInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    brach?: boolean | brachDefaultArgs<ExtArgs>
  }

  export type $trackingsendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trackingsend"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
      brach: Prisma.$brachPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sendCount: number
      sendAt: Date
      sendDay: string
      userId: number
      productId: number
      brachId: number
    }, ExtArgs["result"]["trackingsend"]>
    composites: {}
  }

  type trackingsendGetPayload<S extends boolean | null | undefined | trackingsendDefaultArgs> = $Result.GetResult<Prisma.$trackingsendPayload, S>

  type trackingsendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<trackingsendFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrackingsendCountAggregateInputType | true
    }

  export interface trackingsendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trackingsend'], meta: { name: 'trackingsend' } }
    /**
     * Find zero or one Trackingsend that matches the filter.
     * @param {trackingsendFindUniqueArgs} args - Arguments to find a Trackingsend
     * @example
     * // Get one Trackingsend
     * const trackingsend = await prisma.trackingsend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends trackingsendFindUniqueArgs>(args: SelectSubset<T, trackingsendFindUniqueArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trackingsend that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {trackingsendFindUniqueOrThrowArgs} args - Arguments to find a Trackingsend
     * @example
     * // Get one Trackingsend
     * const trackingsend = await prisma.trackingsend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends trackingsendFindUniqueOrThrowArgs>(args: SelectSubset<T, trackingsendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trackingsend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsendFindFirstArgs} args - Arguments to find a Trackingsend
     * @example
     * // Get one Trackingsend
     * const trackingsend = await prisma.trackingsend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends trackingsendFindFirstArgs>(args?: SelectSubset<T, trackingsendFindFirstArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trackingsend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsendFindFirstOrThrowArgs} args - Arguments to find a Trackingsend
     * @example
     * // Get one Trackingsend
     * const trackingsend = await prisma.trackingsend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends trackingsendFindFirstOrThrowArgs>(args?: SelectSubset<T, trackingsendFindFirstOrThrowArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trackingsends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trackingsends
     * const trackingsends = await prisma.trackingsend.findMany()
     * 
     * // Get first 10 Trackingsends
     * const trackingsends = await prisma.trackingsend.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackingsendWithIdOnly = await prisma.trackingsend.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends trackingsendFindManyArgs>(args?: SelectSubset<T, trackingsendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trackingsend.
     * @param {trackingsendCreateArgs} args - Arguments to create a Trackingsend.
     * @example
     * // Create one Trackingsend
     * const Trackingsend = await prisma.trackingsend.create({
     *   data: {
     *     // ... data to create a Trackingsend
     *   }
     * })
     * 
     */
    create<T extends trackingsendCreateArgs>(args: SelectSubset<T, trackingsendCreateArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trackingsends.
     * @param {trackingsendCreateManyArgs} args - Arguments to create many Trackingsends.
     * @example
     * // Create many Trackingsends
     * const trackingsend = await prisma.trackingsend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends trackingsendCreateManyArgs>(args?: SelectSubset<T, trackingsendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trackingsend.
     * @param {trackingsendDeleteArgs} args - Arguments to delete one Trackingsend.
     * @example
     * // Delete one Trackingsend
     * const Trackingsend = await prisma.trackingsend.delete({
     *   where: {
     *     // ... filter to delete one Trackingsend
     *   }
     * })
     * 
     */
    delete<T extends trackingsendDeleteArgs>(args: SelectSubset<T, trackingsendDeleteArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trackingsend.
     * @param {trackingsendUpdateArgs} args - Arguments to update one Trackingsend.
     * @example
     * // Update one Trackingsend
     * const trackingsend = await prisma.trackingsend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends trackingsendUpdateArgs>(args: SelectSubset<T, trackingsendUpdateArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trackingsends.
     * @param {trackingsendDeleteManyArgs} args - Arguments to filter Trackingsends to delete.
     * @example
     * // Delete a few Trackingsends
     * const { count } = await prisma.trackingsend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends trackingsendDeleteManyArgs>(args?: SelectSubset<T, trackingsendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trackingsends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trackingsends
     * const trackingsend = await prisma.trackingsend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends trackingsendUpdateManyArgs>(args: SelectSubset<T, trackingsendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trackingsend.
     * @param {trackingsendUpsertArgs} args - Arguments to update or create a Trackingsend.
     * @example
     * // Update or create a Trackingsend
     * const trackingsend = await prisma.trackingsend.upsert({
     *   create: {
     *     // ... data to create a Trackingsend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trackingsend we want to update
     *   }
     * })
     */
    upsert<T extends trackingsendUpsertArgs>(args: SelectSubset<T, trackingsendUpsertArgs<ExtArgs>>): Prisma__trackingsendClient<$Result.GetResult<Prisma.$trackingsendPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trackingsends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsendCountArgs} args - Arguments to filter Trackingsends to count.
     * @example
     * // Count the number of Trackingsends
     * const count = await prisma.trackingsend.count({
     *   where: {
     *     // ... the filter for the Trackingsends we want to count
     *   }
     * })
    **/
    count<T extends trackingsendCountArgs>(
      args?: Subset<T, trackingsendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackingsendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trackingsend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingsendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackingsendAggregateArgs>(args: Subset<T, TrackingsendAggregateArgs>): Prisma.PrismaPromise<GetTrackingsendAggregateType<T>>

    /**
     * Group by Trackingsend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingsendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends trackingsendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: trackingsendGroupByArgs['orderBy'] }
        : { orderBy?: trackingsendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, trackingsendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackingsendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trackingsend model
   */
  readonly fields: trackingsendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trackingsend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__trackingsendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    brach<T extends brachDefaultArgs<ExtArgs> = {}>(args?: Subset<T, brachDefaultArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the trackingsend model
   */ 
  interface trackingsendFieldRefs {
    readonly id: FieldRef<"trackingsend", 'Int'>
    readonly sendCount: FieldRef<"trackingsend", 'Int'>
    readonly sendAt: FieldRef<"trackingsend", 'DateTime'>
    readonly sendDay: FieldRef<"trackingsend", 'String'>
    readonly userId: FieldRef<"trackingsend", 'Int'>
    readonly productId: FieldRef<"trackingsend", 'Int'>
    readonly brachId: FieldRef<"trackingsend", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * trackingsend findUnique
   */
  export type trackingsendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * Filter, which trackingsend to fetch.
     */
    where: trackingsendWhereUniqueInput
  }

  /**
   * trackingsend findUniqueOrThrow
   */
  export type trackingsendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * Filter, which trackingsend to fetch.
     */
    where: trackingsendWhereUniqueInput
  }

  /**
   * trackingsend findFirst
   */
  export type trackingsendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * Filter, which trackingsend to fetch.
     */
    where?: trackingsendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsends to fetch.
     */
    orderBy?: trackingsendOrderByWithRelationInput | trackingsendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trackingsends.
     */
    cursor?: trackingsendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trackingsends.
     */
    distinct?: TrackingsendScalarFieldEnum | TrackingsendScalarFieldEnum[]
  }

  /**
   * trackingsend findFirstOrThrow
   */
  export type trackingsendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * Filter, which trackingsend to fetch.
     */
    where?: trackingsendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsends to fetch.
     */
    orderBy?: trackingsendOrderByWithRelationInput | trackingsendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trackingsends.
     */
    cursor?: trackingsendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trackingsends.
     */
    distinct?: TrackingsendScalarFieldEnum | TrackingsendScalarFieldEnum[]
  }

  /**
   * trackingsend findMany
   */
  export type trackingsendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * Filter, which trackingsends to fetch.
     */
    where?: trackingsendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingsends to fetch.
     */
    orderBy?: trackingsendOrderByWithRelationInput | trackingsendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trackingsends.
     */
    cursor?: trackingsendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingsends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingsends.
     */
    skip?: number
    distinct?: TrackingsendScalarFieldEnum | TrackingsendScalarFieldEnum[]
  }

  /**
   * trackingsend create
   */
  export type trackingsendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * The data needed to create a trackingsend.
     */
    data: XOR<trackingsendCreateInput, trackingsendUncheckedCreateInput>
  }

  /**
   * trackingsend createMany
   */
  export type trackingsendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trackingsends.
     */
    data: trackingsendCreateManyInput | trackingsendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * trackingsend update
   */
  export type trackingsendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * The data needed to update a trackingsend.
     */
    data: XOR<trackingsendUpdateInput, trackingsendUncheckedUpdateInput>
    /**
     * Choose, which trackingsend to update.
     */
    where: trackingsendWhereUniqueInput
  }

  /**
   * trackingsend updateMany
   */
  export type trackingsendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trackingsends.
     */
    data: XOR<trackingsendUpdateManyMutationInput, trackingsendUncheckedUpdateManyInput>
    /**
     * Filter which trackingsends to update
     */
    where?: trackingsendWhereInput
    /**
     * Limit how many trackingsends to update.
     */
    limit?: number
  }

  /**
   * trackingsend upsert
   */
  export type trackingsendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * The filter to search for the trackingsend to update in case it exists.
     */
    where: trackingsendWhereUniqueInput
    /**
     * In case the trackingsend found by the `where` argument doesn't exist, create a new trackingsend with this data.
     */
    create: XOR<trackingsendCreateInput, trackingsendUncheckedCreateInput>
    /**
     * In case the trackingsend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<trackingsendUpdateInput, trackingsendUncheckedUpdateInput>
  }

  /**
   * trackingsend delete
   */
  export type trackingsendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
    /**
     * Filter which trackingsend to delete.
     */
    where: trackingsendWhereUniqueInput
  }

  /**
   * trackingsend deleteMany
   */
  export type trackingsendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trackingsends to delete
     */
    where?: trackingsendWhereInput
    /**
     * Limit how many trackingsends to delete.
     */
    limit?: number
  }

  /**
   * trackingsend without action
   */
  export type trackingsendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingsend
     */
    select?: trackingsendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingsend
     */
    omit?: trackingsendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingsendInclude<ExtArgs> | null
  }


  /**
   * Model trackingexp
   */

  export type AggregateTrackingexp = {
    _count: TrackingexpCountAggregateOutputType | null
    _avg: TrackingexpAvgAggregateOutputType | null
    _sum: TrackingexpSumAggregateOutputType | null
    _min: TrackingexpMinAggregateOutputType | null
    _max: TrackingexpMaxAggregateOutputType | null
  }

  export type TrackingexpAvgAggregateOutputType = {
    id: number | null
    expCount: number | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingexpSumAggregateOutputType = {
    id: number | null
    expCount: number | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingexpMinAggregateOutputType = {
    id: number | null
    expCount: number | null
    expAt: Date | null
    expDay: string | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingexpMaxAggregateOutputType = {
    id: number | null
    expCount: number | null
    expAt: Date | null
    expDay: string | null
    userId: number | null
    productId: number | null
    brachId: number | null
  }

  export type TrackingexpCountAggregateOutputType = {
    id: number
    expCount: number
    expAt: number
    expDay: number
    userId: number
    productId: number
    brachId: number
    _all: number
  }


  export type TrackingexpAvgAggregateInputType = {
    id?: true
    expCount?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingexpSumAggregateInputType = {
    id?: true
    expCount?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingexpMinAggregateInputType = {
    id?: true
    expCount?: true
    expAt?: true
    expDay?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingexpMaxAggregateInputType = {
    id?: true
    expCount?: true
    expAt?: true
    expDay?: true
    userId?: true
    productId?: true
    brachId?: true
  }

  export type TrackingexpCountAggregateInputType = {
    id?: true
    expCount?: true
    expAt?: true
    expDay?: true
    userId?: true
    productId?: true
    brachId?: true
    _all?: true
  }

  export type TrackingexpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trackingexp to aggregate.
     */
    where?: trackingexpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingexps to fetch.
     */
    orderBy?: trackingexpOrderByWithRelationInput | trackingexpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: trackingexpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingexps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingexps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trackingexps
    **/
    _count?: true | TrackingexpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackingexpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackingexpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackingexpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackingexpMaxAggregateInputType
  }

  export type GetTrackingexpAggregateType<T extends TrackingexpAggregateArgs> = {
        [P in keyof T & keyof AggregateTrackingexp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrackingexp[P]>
      : GetScalarType<T[P], AggregateTrackingexp[P]>
  }




  export type trackingexpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: trackingexpWhereInput
    orderBy?: trackingexpOrderByWithAggregationInput | trackingexpOrderByWithAggregationInput[]
    by: TrackingexpScalarFieldEnum[] | TrackingexpScalarFieldEnum
    having?: trackingexpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackingexpCountAggregateInputType | true
    _avg?: TrackingexpAvgAggregateInputType
    _sum?: TrackingexpSumAggregateInputType
    _min?: TrackingexpMinAggregateInputType
    _max?: TrackingexpMaxAggregateInputType
  }

  export type TrackingexpGroupByOutputType = {
    id: number
    expCount: number
    expAt: Date
    expDay: string
    userId: number
    productId: number
    brachId: number
    _count: TrackingexpCountAggregateOutputType | null
    _avg: TrackingexpAvgAggregateOutputType | null
    _sum: TrackingexpSumAggregateOutputType | null
    _min: TrackingexpMinAggregateOutputType | null
    _max: TrackingexpMaxAggregateOutputType | null
  }

  type GetTrackingexpGroupByPayload<T extends trackingexpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackingexpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackingexpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackingexpGroupByOutputType[P]>
            : GetScalarType<T[P], TrackingexpGroupByOutputType[P]>
        }
      >
    >


  export type trackingexpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expCount?: boolean
    expAt?: boolean
    expDay?: boolean
    userId?: boolean
    productId?: boolean
    brachId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    brach?: boolean | brachDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackingexp"]>



  export type trackingexpSelectScalar = {
    id?: boolean
    expCount?: boolean
    expAt?: boolean
    expDay?: boolean
    userId?: boolean
    productId?: boolean
    brachId?: boolean
  }

  export type trackingexpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expCount" | "expAt" | "expDay" | "userId" | "productId" | "brachId", ExtArgs["result"]["trackingexp"]>
  export type trackingexpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    product?: boolean | productDefaultArgs<ExtArgs>
    brach?: boolean | brachDefaultArgs<ExtArgs>
  }

  export type $trackingexpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trackingexp"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      product: Prisma.$productPayload<ExtArgs>
      brach: Prisma.$brachPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      expCount: number
      expAt: Date
      expDay: string
      userId: number
      productId: number
      brachId: number
    }, ExtArgs["result"]["trackingexp"]>
    composites: {}
  }

  type trackingexpGetPayload<S extends boolean | null | undefined | trackingexpDefaultArgs> = $Result.GetResult<Prisma.$trackingexpPayload, S>

  type trackingexpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<trackingexpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrackingexpCountAggregateInputType | true
    }

  export interface trackingexpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trackingexp'], meta: { name: 'trackingexp' } }
    /**
     * Find zero or one Trackingexp that matches the filter.
     * @param {trackingexpFindUniqueArgs} args - Arguments to find a Trackingexp
     * @example
     * // Get one Trackingexp
     * const trackingexp = await prisma.trackingexp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends trackingexpFindUniqueArgs>(args: SelectSubset<T, trackingexpFindUniqueArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trackingexp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {trackingexpFindUniqueOrThrowArgs} args - Arguments to find a Trackingexp
     * @example
     * // Get one Trackingexp
     * const trackingexp = await prisma.trackingexp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends trackingexpFindUniqueOrThrowArgs>(args: SelectSubset<T, trackingexpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trackingexp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingexpFindFirstArgs} args - Arguments to find a Trackingexp
     * @example
     * // Get one Trackingexp
     * const trackingexp = await prisma.trackingexp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends trackingexpFindFirstArgs>(args?: SelectSubset<T, trackingexpFindFirstArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trackingexp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingexpFindFirstOrThrowArgs} args - Arguments to find a Trackingexp
     * @example
     * // Get one Trackingexp
     * const trackingexp = await prisma.trackingexp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends trackingexpFindFirstOrThrowArgs>(args?: SelectSubset<T, trackingexpFindFirstOrThrowArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trackingexps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingexpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trackingexps
     * const trackingexps = await prisma.trackingexp.findMany()
     * 
     * // Get first 10 Trackingexps
     * const trackingexps = await prisma.trackingexp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackingexpWithIdOnly = await prisma.trackingexp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends trackingexpFindManyArgs>(args?: SelectSubset<T, trackingexpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trackingexp.
     * @param {trackingexpCreateArgs} args - Arguments to create a Trackingexp.
     * @example
     * // Create one Trackingexp
     * const Trackingexp = await prisma.trackingexp.create({
     *   data: {
     *     // ... data to create a Trackingexp
     *   }
     * })
     * 
     */
    create<T extends trackingexpCreateArgs>(args: SelectSubset<T, trackingexpCreateArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trackingexps.
     * @param {trackingexpCreateManyArgs} args - Arguments to create many Trackingexps.
     * @example
     * // Create many Trackingexps
     * const trackingexp = await prisma.trackingexp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends trackingexpCreateManyArgs>(args?: SelectSubset<T, trackingexpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trackingexp.
     * @param {trackingexpDeleteArgs} args - Arguments to delete one Trackingexp.
     * @example
     * // Delete one Trackingexp
     * const Trackingexp = await prisma.trackingexp.delete({
     *   where: {
     *     // ... filter to delete one Trackingexp
     *   }
     * })
     * 
     */
    delete<T extends trackingexpDeleteArgs>(args: SelectSubset<T, trackingexpDeleteArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trackingexp.
     * @param {trackingexpUpdateArgs} args - Arguments to update one Trackingexp.
     * @example
     * // Update one Trackingexp
     * const trackingexp = await prisma.trackingexp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends trackingexpUpdateArgs>(args: SelectSubset<T, trackingexpUpdateArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trackingexps.
     * @param {trackingexpDeleteManyArgs} args - Arguments to filter Trackingexps to delete.
     * @example
     * // Delete a few Trackingexps
     * const { count } = await prisma.trackingexp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends trackingexpDeleteManyArgs>(args?: SelectSubset<T, trackingexpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trackingexps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingexpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trackingexps
     * const trackingexp = await prisma.trackingexp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends trackingexpUpdateManyArgs>(args: SelectSubset<T, trackingexpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trackingexp.
     * @param {trackingexpUpsertArgs} args - Arguments to update or create a Trackingexp.
     * @example
     * // Update or create a Trackingexp
     * const trackingexp = await prisma.trackingexp.upsert({
     *   create: {
     *     // ... data to create a Trackingexp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trackingexp we want to update
     *   }
     * })
     */
    upsert<T extends trackingexpUpsertArgs>(args: SelectSubset<T, trackingexpUpsertArgs<ExtArgs>>): Prisma__trackingexpClient<$Result.GetResult<Prisma.$trackingexpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trackingexps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingexpCountArgs} args - Arguments to filter Trackingexps to count.
     * @example
     * // Count the number of Trackingexps
     * const count = await prisma.trackingexp.count({
     *   where: {
     *     // ... the filter for the Trackingexps we want to count
     *   }
     * })
    **/
    count<T extends trackingexpCountArgs>(
      args?: Subset<T, trackingexpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackingexpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trackingexp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackingexpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackingexpAggregateArgs>(args: Subset<T, TrackingexpAggregateArgs>): Prisma.PrismaPromise<GetTrackingexpAggregateType<T>>

    /**
     * Group by Trackingexp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {trackingexpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends trackingexpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: trackingexpGroupByArgs['orderBy'] }
        : { orderBy?: trackingexpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, trackingexpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackingexpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trackingexp model
   */
  readonly fields: trackingexpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trackingexp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__trackingexpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends productDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productDefaultArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    brach<T extends brachDefaultArgs<ExtArgs> = {}>(args?: Subset<T, brachDefaultArgs<ExtArgs>>): Prisma__brachClient<$Result.GetResult<Prisma.$brachPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the trackingexp model
   */ 
  interface trackingexpFieldRefs {
    readonly id: FieldRef<"trackingexp", 'Int'>
    readonly expCount: FieldRef<"trackingexp", 'Int'>
    readonly expAt: FieldRef<"trackingexp", 'DateTime'>
    readonly expDay: FieldRef<"trackingexp", 'String'>
    readonly userId: FieldRef<"trackingexp", 'Int'>
    readonly productId: FieldRef<"trackingexp", 'Int'>
    readonly brachId: FieldRef<"trackingexp", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * trackingexp findUnique
   */
  export type trackingexpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * Filter, which trackingexp to fetch.
     */
    where: trackingexpWhereUniqueInput
  }

  /**
   * trackingexp findUniqueOrThrow
   */
  export type trackingexpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * Filter, which trackingexp to fetch.
     */
    where: trackingexpWhereUniqueInput
  }

  /**
   * trackingexp findFirst
   */
  export type trackingexpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * Filter, which trackingexp to fetch.
     */
    where?: trackingexpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingexps to fetch.
     */
    orderBy?: trackingexpOrderByWithRelationInput | trackingexpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trackingexps.
     */
    cursor?: trackingexpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingexps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingexps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trackingexps.
     */
    distinct?: TrackingexpScalarFieldEnum | TrackingexpScalarFieldEnum[]
  }

  /**
   * trackingexp findFirstOrThrow
   */
  export type trackingexpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * Filter, which trackingexp to fetch.
     */
    where?: trackingexpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingexps to fetch.
     */
    orderBy?: trackingexpOrderByWithRelationInput | trackingexpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trackingexps.
     */
    cursor?: trackingexpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingexps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingexps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trackingexps.
     */
    distinct?: TrackingexpScalarFieldEnum | TrackingexpScalarFieldEnum[]
  }

  /**
   * trackingexp findMany
   */
  export type trackingexpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * Filter, which trackingexps to fetch.
     */
    where?: trackingexpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trackingexps to fetch.
     */
    orderBy?: trackingexpOrderByWithRelationInput | trackingexpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trackingexps.
     */
    cursor?: trackingexpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trackingexps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trackingexps.
     */
    skip?: number
    distinct?: TrackingexpScalarFieldEnum | TrackingexpScalarFieldEnum[]
  }

  /**
   * trackingexp create
   */
  export type trackingexpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * The data needed to create a trackingexp.
     */
    data: XOR<trackingexpCreateInput, trackingexpUncheckedCreateInput>
  }

  /**
   * trackingexp createMany
   */
  export type trackingexpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trackingexps.
     */
    data: trackingexpCreateManyInput | trackingexpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * trackingexp update
   */
  export type trackingexpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * The data needed to update a trackingexp.
     */
    data: XOR<trackingexpUpdateInput, trackingexpUncheckedUpdateInput>
    /**
     * Choose, which trackingexp to update.
     */
    where: trackingexpWhereUniqueInput
  }

  /**
   * trackingexp updateMany
   */
  export type trackingexpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trackingexps.
     */
    data: XOR<trackingexpUpdateManyMutationInput, trackingexpUncheckedUpdateManyInput>
    /**
     * Filter which trackingexps to update
     */
    where?: trackingexpWhereInput
    /**
     * Limit how many trackingexps to update.
     */
    limit?: number
  }

  /**
   * trackingexp upsert
   */
  export type trackingexpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * The filter to search for the trackingexp to update in case it exists.
     */
    where: trackingexpWhereUniqueInput
    /**
     * In case the trackingexp found by the `where` argument doesn't exist, create a new trackingexp with this data.
     */
    create: XOR<trackingexpCreateInput, trackingexpUncheckedCreateInput>
    /**
     * In case the trackingexp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<trackingexpUpdateInput, trackingexpUncheckedUpdateInput>
  }

  /**
   * trackingexp delete
   */
  export type trackingexpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
    /**
     * Filter which trackingexp to delete.
     */
    where: trackingexpWhereUniqueInput
  }

  /**
   * trackingexp deleteMany
   */
  export type trackingexpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trackingexps to delete
     */
    where?: trackingexpWhereInput
    /**
     * Limit how many trackingexps to delete.
     */
    limit?: number
  }

  /**
   * trackingexp without action
   */
  export type trackingexpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trackingexp
     */
    select?: trackingexpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the trackingexp
     */
    omit?: trackingexpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: trackingexpInclude<ExtArgs> | null
  }


  /**
   * Model category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    product?: boolean | category$productArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>



  export type categorySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type categoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["category"]>
  export type categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | category$productArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "category"
    objects: {
      product: Prisma.$productPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type categoryGetPayload<S extends boolean | null | undefined | categoryDefaultArgs> = $Result.GetResult<Prisma.$categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<categoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoryFindUniqueArgs>(args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoryFindFirstArgs>(args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoryFindManyArgs>(args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends categoryCreateArgs>(args: SelectSubset<T, categoryCreateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoryCreateManyArgs>(args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends categoryDeleteArgs>(args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoryUpdateArgs>(args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoryDeleteManyArgs>(args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoryUpdateManyArgs>(args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends categoryUpsertArgs>(args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends category$productArgs<ExtArgs> = {}>(args?: Subset<T, category$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the category model
   */ 
  interface categoryFieldRefs {
    readonly id: FieldRef<"category", 'Int'>
    readonly name: FieldRef<"category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }

  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
    /**
     * Limit how many categories to update.
     */
    limit?: number
  }

  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }

  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
    /**
     * Limit how many categories to delete.
     */
    limit?: number
  }

  /**
   * category.product
   */
  export type category$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * category without action
   */
  export type categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    password: 'password',
    phonenumber: 'phonenumber',
    role: 'role',
    status: 'status',
    birstDate: 'birstDate',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    sellprice: 'sellprice',
    lifetime: 'lifetime',
    image: 'image',
    categoryId: 'categoryId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const BrachScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BrachScalarFieldEnum = (typeof BrachScalarFieldEnum)[keyof typeof BrachScalarFieldEnum]


  export const TrackingsellScalarFieldEnum: {
    id: 'id',
    sellCount: 'sellCount',
    sellAt: 'sellAt',
    sellDay: 'sellDay',
    userId: 'userId',
    productId: 'productId',
    brachId: 'brachId'
  };

  export type TrackingsellScalarFieldEnum = (typeof TrackingsellScalarFieldEnum)[keyof typeof TrackingsellScalarFieldEnum]


  export const TrackingsendScalarFieldEnum: {
    id: 'id',
    sendCount: 'sendCount',
    sendAt: 'sendAt',
    sendDay: 'sendDay',
    userId: 'userId',
    productId: 'productId',
    brachId: 'brachId'
  };

  export type TrackingsendScalarFieldEnum = (typeof TrackingsendScalarFieldEnum)[keyof typeof TrackingsendScalarFieldEnum]


  export const TrackingexpScalarFieldEnum: {
    id: 'id',
    expCount: 'expCount',
    expAt: 'expAt',
    expDay: 'expDay',
    userId: 'userId',
    productId: 'productId',
    brachId: 'brachId'
  };

  export type TrackingexpScalarFieldEnum = (typeof TrackingexpScalarFieldEnum)[keyof typeof TrackingexpScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    firstname: 'firstname',
    lastname: 'lastname',
    password: 'password',
    phonenumber: 'phonenumber',
    role: 'role',
    image: 'image'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const productOrderByRelevanceFieldEnum: {
    name: 'name',
    image: 'image'
  };

  export type productOrderByRelevanceFieldEnum = (typeof productOrderByRelevanceFieldEnum)[keyof typeof productOrderByRelevanceFieldEnum]


  export const brachOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type brachOrderByRelevanceFieldEnum = (typeof brachOrderByRelevanceFieldEnum)[keyof typeof brachOrderByRelevanceFieldEnum]


  export const trackingsellOrderByRelevanceFieldEnum: {
    sellDay: 'sellDay'
  };

  export type trackingsellOrderByRelevanceFieldEnum = (typeof trackingsellOrderByRelevanceFieldEnum)[keyof typeof trackingsellOrderByRelevanceFieldEnum]


  export const trackingsendOrderByRelevanceFieldEnum: {
    sendDay: 'sendDay'
  };

  export type trackingsendOrderByRelevanceFieldEnum = (typeof trackingsendOrderByRelevanceFieldEnum)[keyof typeof trackingsendOrderByRelevanceFieldEnum]


  export const trackingexpOrderByRelevanceFieldEnum: {
    expDay: 'expDay'
  };

  export type trackingexpOrderByRelevanceFieldEnum = (typeof trackingexpOrderByRelevanceFieldEnum)[keyof typeof trackingexpOrderByRelevanceFieldEnum]


  export const categoryOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type categoryOrderByRelevanceFieldEnum = (typeof categoryOrderByRelevanceFieldEnum)[keyof typeof categoryOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phonenumber?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    birstDate?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    tracksell?: TrackingsellListRelationFilter
    tracksend?: TrackingsendListRelationFilter
    trackexp?: TrackingexpListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    phonenumber?: SortOrder
    role?: SortOrder
    status?: SortOrder
    birstDate?: SortOrder
    image?: SortOrderInput | SortOrder
    tracksell?: trackingsellOrderByRelationAggregateInput
    tracksend?: trackingsendOrderByRelationAggregateInput
    trackexp?: trackingexpOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phonenumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    status?: BoolFilter<"User"> | boolean
    birstDate?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    tracksell?: TrackingsellListRelationFilter
    tracksend?: TrackingsendListRelationFilter
    trackexp?: TrackingexpListRelationFilter
  }, "id" | "id" | "phonenumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    phonenumber?: SortOrder
    role?: SortOrder
    status?: SortOrder
    birstDate?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phonenumber?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    status?: BoolWithAggregatesFilter<"User"> | boolean
    birstDate?: DateTimeWithAggregatesFilter<"User"> | Date | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type productWhereInput = {
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    id?: IntFilter<"product"> | number
    name?: StringFilter<"product"> | string
    price?: IntFilter<"product"> | number
    sellprice?: IntFilter<"product"> | number
    lifetime?: IntFilter<"product"> | number
    image?: StringNullableFilter<"product"> | string | null
    categoryId?: IntFilter<"product"> | number
    tracksell?: TrackingsellListRelationFilter
    tracksend?: TrackingsendListRelationFilter
    trackexp?: TrackingexpListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, categoryWhereInput>
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    sellprice?: SortOrder
    lifetime?: SortOrder
    image?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    tracksell?: trackingsellOrderByRelationAggregateInput
    tracksend?: trackingsendOrderByRelationAggregateInput
    trackexp?: trackingexpOrderByRelationAggregateInput
    category?: categoryOrderByWithRelationInput
    _relevance?: productOrderByRelevanceInput
  }

  export type productWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    name?: StringFilter<"product"> | string
    price?: IntFilter<"product"> | number
    sellprice?: IntFilter<"product"> | number
    lifetime?: IntFilter<"product"> | number
    image?: StringNullableFilter<"product"> | string | null
    categoryId?: IntFilter<"product"> | number
    tracksell?: TrackingsellListRelationFilter
    tracksend?: TrackingsendListRelationFilter
    trackexp?: TrackingexpListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, categoryWhereInput>
  }, "id" | "id">

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    sellprice?: SortOrder
    lifetime?: SortOrder
    image?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    OR?: productScalarWhereWithAggregatesInput[]
    NOT?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product"> | number
    name?: StringWithAggregatesFilter<"product"> | string
    price?: IntWithAggregatesFilter<"product"> | number
    sellprice?: IntWithAggregatesFilter<"product"> | number
    lifetime?: IntWithAggregatesFilter<"product"> | number
    image?: StringNullableWithAggregatesFilter<"product"> | string | null
    categoryId?: IntWithAggregatesFilter<"product"> | number
  }

  export type brachWhereInput = {
    AND?: brachWhereInput | brachWhereInput[]
    OR?: brachWhereInput[]
    NOT?: brachWhereInput | brachWhereInput[]
    id?: IntFilter<"brach"> | number
    name?: StringFilter<"brach"> | string
    tracsell?: TrackingsellListRelationFilter
    tracksend?: TrackingsendListRelationFilter
    trackexp?: TrackingexpListRelationFilter
  }

  export type brachOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tracsell?: trackingsellOrderByRelationAggregateInput
    tracksend?: trackingsendOrderByRelationAggregateInput
    trackexp?: trackingexpOrderByRelationAggregateInput
    _relevance?: brachOrderByRelevanceInput
  }

  export type brachWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: brachWhereInput | brachWhereInput[]
    OR?: brachWhereInput[]
    NOT?: brachWhereInput | brachWhereInput[]
    name?: StringFilter<"brach"> | string
    tracsell?: TrackingsellListRelationFilter
    tracksend?: TrackingsendListRelationFilter
    trackexp?: TrackingexpListRelationFilter
  }, "id" | "id">

  export type brachOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: brachCountOrderByAggregateInput
    _avg?: brachAvgOrderByAggregateInput
    _max?: brachMaxOrderByAggregateInput
    _min?: brachMinOrderByAggregateInput
    _sum?: brachSumOrderByAggregateInput
  }

  export type brachScalarWhereWithAggregatesInput = {
    AND?: brachScalarWhereWithAggregatesInput | brachScalarWhereWithAggregatesInput[]
    OR?: brachScalarWhereWithAggregatesInput[]
    NOT?: brachScalarWhereWithAggregatesInput | brachScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"brach"> | number
    name?: StringWithAggregatesFilter<"brach"> | string
  }

  export type trackingsellWhereInput = {
    AND?: trackingsellWhereInput | trackingsellWhereInput[]
    OR?: trackingsellWhereInput[]
    NOT?: trackingsellWhereInput | trackingsellWhereInput[]
    id?: IntFilter<"trackingsell"> | number
    sellCount?: IntFilter<"trackingsell"> | number
    sellAt?: DateTimeFilter<"trackingsell"> | Date | string
    sellDay?: StringFilter<"trackingsell"> | string
    userId?: IntFilter<"trackingsell"> | number
    productId?: IntFilter<"trackingsell"> | number
    brachId?: IntFilter<"trackingsell"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    brach?: XOR<BrachScalarRelationFilter, brachWhereInput>
  }

  export type trackingsellOrderByWithRelationInput = {
    id?: SortOrder
    sellCount?: SortOrder
    sellAt?: SortOrder
    sellDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
    User?: UserOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    brach?: brachOrderByWithRelationInput
    _relevance?: trackingsellOrderByRelevanceInput
  }

  export type trackingsellWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: trackingsellWhereInput | trackingsellWhereInput[]
    OR?: trackingsellWhereInput[]
    NOT?: trackingsellWhereInput | trackingsellWhereInput[]
    sellCount?: IntFilter<"trackingsell"> | number
    sellAt?: DateTimeFilter<"trackingsell"> | Date | string
    sellDay?: StringFilter<"trackingsell"> | string
    userId?: IntFilter<"trackingsell"> | number
    productId?: IntFilter<"trackingsell"> | number
    brachId?: IntFilter<"trackingsell"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    brach?: XOR<BrachScalarRelationFilter, brachWhereInput>
  }, "id" | "id">

  export type trackingsellOrderByWithAggregationInput = {
    id?: SortOrder
    sellCount?: SortOrder
    sellAt?: SortOrder
    sellDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
    _count?: trackingsellCountOrderByAggregateInput
    _avg?: trackingsellAvgOrderByAggregateInput
    _max?: trackingsellMaxOrderByAggregateInput
    _min?: trackingsellMinOrderByAggregateInput
    _sum?: trackingsellSumOrderByAggregateInput
  }

  export type trackingsellScalarWhereWithAggregatesInput = {
    AND?: trackingsellScalarWhereWithAggregatesInput | trackingsellScalarWhereWithAggregatesInput[]
    OR?: trackingsellScalarWhereWithAggregatesInput[]
    NOT?: trackingsellScalarWhereWithAggregatesInput | trackingsellScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"trackingsell"> | number
    sellCount?: IntWithAggregatesFilter<"trackingsell"> | number
    sellAt?: DateTimeWithAggregatesFilter<"trackingsell"> | Date | string
    sellDay?: StringWithAggregatesFilter<"trackingsell"> | string
    userId?: IntWithAggregatesFilter<"trackingsell"> | number
    productId?: IntWithAggregatesFilter<"trackingsell"> | number
    brachId?: IntWithAggregatesFilter<"trackingsell"> | number
  }

  export type trackingsendWhereInput = {
    AND?: trackingsendWhereInput | trackingsendWhereInput[]
    OR?: trackingsendWhereInput[]
    NOT?: trackingsendWhereInput | trackingsendWhereInput[]
    id?: IntFilter<"trackingsend"> | number
    sendCount?: IntFilter<"trackingsend"> | number
    sendAt?: DateTimeFilter<"trackingsend"> | Date | string
    sendDay?: StringFilter<"trackingsend"> | string
    userId?: IntFilter<"trackingsend"> | number
    productId?: IntFilter<"trackingsend"> | number
    brachId?: IntFilter<"trackingsend"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    brach?: XOR<BrachScalarRelationFilter, brachWhereInput>
  }

  export type trackingsendOrderByWithRelationInput = {
    id?: SortOrder
    sendCount?: SortOrder
    sendAt?: SortOrder
    sendDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
    User?: UserOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    brach?: brachOrderByWithRelationInput
    _relevance?: trackingsendOrderByRelevanceInput
  }

  export type trackingsendWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: trackingsendWhereInput | trackingsendWhereInput[]
    OR?: trackingsendWhereInput[]
    NOT?: trackingsendWhereInput | trackingsendWhereInput[]
    sendCount?: IntFilter<"trackingsend"> | number
    sendAt?: DateTimeFilter<"trackingsend"> | Date | string
    sendDay?: StringFilter<"trackingsend"> | string
    userId?: IntFilter<"trackingsend"> | number
    productId?: IntFilter<"trackingsend"> | number
    brachId?: IntFilter<"trackingsend"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    brach?: XOR<BrachScalarRelationFilter, brachWhereInput>
  }, "id">

  export type trackingsendOrderByWithAggregationInput = {
    id?: SortOrder
    sendCount?: SortOrder
    sendAt?: SortOrder
    sendDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
    _count?: trackingsendCountOrderByAggregateInput
    _avg?: trackingsendAvgOrderByAggregateInput
    _max?: trackingsendMaxOrderByAggregateInput
    _min?: trackingsendMinOrderByAggregateInput
    _sum?: trackingsendSumOrderByAggregateInput
  }

  export type trackingsendScalarWhereWithAggregatesInput = {
    AND?: trackingsendScalarWhereWithAggregatesInput | trackingsendScalarWhereWithAggregatesInput[]
    OR?: trackingsendScalarWhereWithAggregatesInput[]
    NOT?: trackingsendScalarWhereWithAggregatesInput | trackingsendScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"trackingsend"> | number
    sendCount?: IntWithAggregatesFilter<"trackingsend"> | number
    sendAt?: DateTimeWithAggregatesFilter<"trackingsend"> | Date | string
    sendDay?: StringWithAggregatesFilter<"trackingsend"> | string
    userId?: IntWithAggregatesFilter<"trackingsend"> | number
    productId?: IntWithAggregatesFilter<"trackingsend"> | number
    brachId?: IntWithAggregatesFilter<"trackingsend"> | number
  }

  export type trackingexpWhereInput = {
    AND?: trackingexpWhereInput | trackingexpWhereInput[]
    OR?: trackingexpWhereInput[]
    NOT?: trackingexpWhereInput | trackingexpWhereInput[]
    id?: IntFilter<"trackingexp"> | number
    expCount?: IntFilter<"trackingexp"> | number
    expAt?: DateTimeFilter<"trackingexp"> | Date | string
    expDay?: StringFilter<"trackingexp"> | string
    userId?: IntFilter<"trackingexp"> | number
    productId?: IntFilter<"trackingexp"> | number
    brachId?: IntFilter<"trackingexp"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    brach?: XOR<BrachScalarRelationFilter, brachWhereInput>
  }

  export type trackingexpOrderByWithRelationInput = {
    id?: SortOrder
    expCount?: SortOrder
    expAt?: SortOrder
    expDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
    User?: UserOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    brach?: brachOrderByWithRelationInput
    _relevance?: trackingexpOrderByRelevanceInput
  }

  export type trackingexpWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: trackingexpWhereInput | trackingexpWhereInput[]
    OR?: trackingexpWhereInput[]
    NOT?: trackingexpWhereInput | trackingexpWhereInput[]
    expCount?: IntFilter<"trackingexp"> | number
    expAt?: DateTimeFilter<"trackingexp"> | Date | string
    expDay?: StringFilter<"trackingexp"> | string
    userId?: IntFilter<"trackingexp"> | number
    productId?: IntFilter<"trackingexp"> | number
    brachId?: IntFilter<"trackingexp"> | number
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    product?: XOR<ProductScalarRelationFilter, productWhereInput>
    brach?: XOR<BrachScalarRelationFilter, brachWhereInput>
  }, "id">

  export type trackingexpOrderByWithAggregationInput = {
    id?: SortOrder
    expCount?: SortOrder
    expAt?: SortOrder
    expDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
    _count?: trackingexpCountOrderByAggregateInput
    _avg?: trackingexpAvgOrderByAggregateInput
    _max?: trackingexpMaxOrderByAggregateInput
    _min?: trackingexpMinOrderByAggregateInput
    _sum?: trackingexpSumOrderByAggregateInput
  }

  export type trackingexpScalarWhereWithAggregatesInput = {
    AND?: trackingexpScalarWhereWithAggregatesInput | trackingexpScalarWhereWithAggregatesInput[]
    OR?: trackingexpScalarWhereWithAggregatesInput[]
    NOT?: trackingexpScalarWhereWithAggregatesInput | trackingexpScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"trackingexp"> | number
    expCount?: IntWithAggregatesFilter<"trackingexp"> | number
    expAt?: DateTimeWithAggregatesFilter<"trackingexp"> | Date | string
    expDay?: StringWithAggregatesFilter<"trackingexp"> | string
    userId?: IntWithAggregatesFilter<"trackingexp"> | number
    productId?: IntWithAggregatesFilter<"trackingexp"> | number
    brachId?: IntWithAggregatesFilter<"trackingexp"> | number
  }

  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    id?: IntFilter<"category"> | number
    name?: StringFilter<"category"> | string
    product?: ProductListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    product?: productOrderByRelationAggregateInput
    _relevance?: categoryOrderByRelevanceInput
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    name?: StringFilter<"category"> | string
    product?: ProductListRelationFilter
  }, "id">

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _avg?: categoryAvgOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
    _sum?: categorySumOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"category"> | number
    name?: StringWithAggregatesFilter<"category"> | string
  }

  export type UserCreateInput = {
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksell?: trackingsellCreateNestedManyWithoutUserInput
    tracksend?: trackingsendCreateNestedManyWithoutUserInput
    trackexp?: trackingexpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksell?: trackingsellUncheckedCreateNestedManyWithoutUserInput
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutUserInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUpdateManyWithoutUserNestedInput
    tracksend?: trackingsendUpdateManyWithoutUserNestedInput
    trackexp?: trackingexpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUncheckedUpdateManyWithoutUserNestedInput
    tracksend?: trackingsendUncheckedUpdateManyWithoutUserNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productCreateInput = {
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    tracksell?: trackingsellCreateNestedManyWithoutProductInput
    tracksend?: trackingsendCreateNestedManyWithoutProductInput
    trackexp?: trackingexpCreateNestedManyWithoutProductInput
    category: categoryCreateNestedOneWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    categoryId: number
    tracksell?: trackingsellUncheckedCreateNestedManyWithoutProductInput
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutProductInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUpdateManyWithoutProductNestedInput
    tracksend?: trackingsendUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUpdateManyWithoutProductNestedInput
    category?: categoryUpdateOneRequiredWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    tracksell?: trackingsellUncheckedUpdateManyWithoutProductNestedInput
    tracksend?: trackingsendUncheckedUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    id?: number
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    categoryId: number
  }

  export type productUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type brachCreateInput = {
    name: string
    tracsell?: trackingsellCreateNestedManyWithoutBrachInput
    tracksend?: trackingsendCreateNestedManyWithoutBrachInput
    trackexp?: trackingexpCreateNestedManyWithoutBrachInput
  }

  export type brachUncheckedCreateInput = {
    id?: number
    name: string
    tracsell?: trackingsellUncheckedCreateNestedManyWithoutBrachInput
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutBrachInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutBrachInput
  }

  export type brachUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    tracsell?: trackingsellUpdateManyWithoutBrachNestedInput
    tracksend?: trackingsendUpdateManyWithoutBrachNestedInput
    trackexp?: trackingexpUpdateManyWithoutBrachNestedInput
  }

  export type brachUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tracsell?: trackingsellUncheckedUpdateManyWithoutBrachNestedInput
    tracksend?: trackingsendUncheckedUpdateManyWithoutBrachNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutBrachNestedInput
  }

  export type brachCreateManyInput = {
    id?: number
    name: string
  }

  export type brachUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type brachUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type trackingsellCreateInput = {
    sellCount: number
    sellAt: Date | string
    sellDay: string
    User: UserCreateNestedOneWithoutTracksellInput
    product: productCreateNestedOneWithoutTracksellInput
    brach: brachCreateNestedOneWithoutTracsellInput
  }

  export type trackingsellUncheckedCreateInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    userId: number
    productId: number
    brachId: number
  }

  export type trackingsellUpdateInput = {
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTracksellNestedInput
    product?: productUpdateOneRequiredWithoutTracksellNestedInput
    brach?: brachUpdateOneRequiredWithoutTracsellNestedInput
  }

  export type trackingsellUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsellCreateManyInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    userId: number
    productId: number
    brachId: number
  }

  export type trackingsellUpdateManyMutationInput = {
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
  }

  export type trackingsellUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendCreateInput = {
    sendCount: number
    sendAt: Date | string
    sendDay: string
    User: UserCreateNestedOneWithoutTracksendInput
    product: productCreateNestedOneWithoutTracksendInput
    brach: brachCreateNestedOneWithoutTracksendInput
  }

  export type trackingsendUncheckedCreateInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    userId: number
    productId: number
    brachId: number
  }

  export type trackingsendUpdateInput = {
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTracksendNestedInput
    product?: productUpdateOneRequiredWithoutTracksendNestedInput
    brach?: brachUpdateOneRequiredWithoutTracksendNestedInput
  }

  export type trackingsendUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendCreateManyInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    userId: number
    productId: number
    brachId: number
  }

  export type trackingsendUpdateManyMutationInput = {
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
  }

  export type trackingsendUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpCreateInput = {
    expCount: number
    expAt: Date | string
    expDay: string
    User: UserCreateNestedOneWithoutTrackexpInput
    product: productCreateNestedOneWithoutTrackexpInput
    brach: brachCreateNestedOneWithoutTrackexpInput
  }

  export type trackingexpUncheckedCreateInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    userId: number
    productId: number
    brachId: number
  }

  export type trackingexpUpdateInput = {
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTrackexpNestedInput
    product?: productUpdateOneRequiredWithoutTrackexpNestedInput
    brach?: brachUpdateOneRequiredWithoutTrackexpNestedInput
  }

  export type trackingexpUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpCreateManyInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    userId: number
    productId: number
    brachId: number
  }

  export type trackingexpUpdateManyMutationInput = {
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
  }

  export type trackingexpUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type categoryCreateInput = {
    name: string
    product?: productCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id?: number
    name: string
    product?: productUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    product?: productUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    product?: productUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryCreateManyInput = {
    id?: number
    name: string
  }

  export type categoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TrackingsellListRelationFilter = {
    every?: trackingsellWhereInput
    some?: trackingsellWhereInput
    none?: trackingsellWhereInput
  }

  export type TrackingsendListRelationFilter = {
    every?: trackingsendWhereInput
    some?: trackingsendWhereInput
    none?: trackingsendWhereInput
  }

  export type TrackingexpListRelationFilter = {
    every?: trackingexpWhereInput
    some?: trackingexpWhereInput
    none?: trackingexpWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type trackingsellOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type trackingsendOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type trackingexpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    phonenumber?: SortOrder
    role?: SortOrder
    status?: SortOrder
    birstDate?: SortOrder
    image?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    phonenumber?: SortOrder
    role?: SortOrder
    status?: SortOrder
    birstDate?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    password?: SortOrder
    phonenumber?: SortOrder
    role?: SortOrder
    status?: SortOrder
    birstDate?: SortOrder
    image?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CategoryScalarRelationFilter = {
    is?: categoryWhereInput
    isNot?: categoryWhereInput
  }

  export type productOrderByRelevanceInput = {
    fields: productOrderByRelevanceFieldEnum | productOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    sellprice?: SortOrder
    lifetime?: SortOrder
    image?: SortOrder
    categoryId?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sellprice?: SortOrder
    lifetime?: SortOrder
    categoryId?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    sellprice?: SortOrder
    lifetime?: SortOrder
    image?: SortOrder
    categoryId?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    sellprice?: SortOrder
    lifetime?: SortOrder
    image?: SortOrder
    categoryId?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sellprice?: SortOrder
    lifetime?: SortOrder
    categoryId?: SortOrder
  }

  export type brachOrderByRelevanceInput = {
    fields: brachOrderByRelevanceFieldEnum | brachOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type brachCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type brachAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type brachMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type brachMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type brachSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProductScalarRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type BrachScalarRelationFilter = {
    is?: brachWhereInput
    isNot?: brachWhereInput
  }

  export type trackingsellOrderByRelevanceInput = {
    fields: trackingsellOrderByRelevanceFieldEnum | trackingsellOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type trackingsellCountOrderByAggregateInput = {
    id?: SortOrder
    sellCount?: SortOrder
    sellAt?: SortOrder
    sellDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsellAvgOrderByAggregateInput = {
    id?: SortOrder
    sellCount?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsellMaxOrderByAggregateInput = {
    id?: SortOrder
    sellCount?: SortOrder
    sellAt?: SortOrder
    sellDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsellMinOrderByAggregateInput = {
    id?: SortOrder
    sellCount?: SortOrder
    sellAt?: SortOrder
    sellDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsellSumOrderByAggregateInput = {
    id?: SortOrder
    sellCount?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsendOrderByRelevanceInput = {
    fields: trackingsendOrderByRelevanceFieldEnum | trackingsendOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type trackingsendCountOrderByAggregateInput = {
    id?: SortOrder
    sendCount?: SortOrder
    sendAt?: SortOrder
    sendDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsendAvgOrderByAggregateInput = {
    id?: SortOrder
    sendCount?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsendMaxOrderByAggregateInput = {
    id?: SortOrder
    sendCount?: SortOrder
    sendAt?: SortOrder
    sendDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsendMinOrderByAggregateInput = {
    id?: SortOrder
    sendCount?: SortOrder
    sendAt?: SortOrder
    sendDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingsendSumOrderByAggregateInput = {
    id?: SortOrder
    sendCount?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingexpOrderByRelevanceInput = {
    fields: trackingexpOrderByRelevanceFieldEnum | trackingexpOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type trackingexpCountOrderByAggregateInput = {
    id?: SortOrder
    expCount?: SortOrder
    expAt?: SortOrder
    expDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingexpAvgOrderByAggregateInput = {
    id?: SortOrder
    expCount?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingexpMaxOrderByAggregateInput = {
    id?: SortOrder
    expCount?: SortOrder
    expAt?: SortOrder
    expDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingexpMinOrderByAggregateInput = {
    id?: SortOrder
    expCount?: SortOrder
    expAt?: SortOrder
    expDay?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type trackingexpSumOrderByAggregateInput = {
    id?: SortOrder
    expCount?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    brachId?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryOrderByRelevanceInput = {
    fields: categoryOrderByRelevanceFieldEnum | categoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type categorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type trackingsellCreateNestedManyWithoutUserInput = {
    create?: XOR<trackingsellCreateWithoutUserInput, trackingsellUncheckedCreateWithoutUserInput> | trackingsellCreateWithoutUserInput[] | trackingsellUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutUserInput | trackingsellCreateOrConnectWithoutUserInput[]
    createMany?: trackingsellCreateManyUserInputEnvelope
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
  }

  export type trackingsendCreateNestedManyWithoutUserInput = {
    create?: XOR<trackingsendCreateWithoutUserInput, trackingsendUncheckedCreateWithoutUserInput> | trackingsendCreateWithoutUserInput[] | trackingsendUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutUserInput | trackingsendCreateOrConnectWithoutUserInput[]
    createMany?: trackingsendCreateManyUserInputEnvelope
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
  }

  export type trackingexpCreateNestedManyWithoutUserInput = {
    create?: XOR<trackingexpCreateWithoutUserInput, trackingexpUncheckedCreateWithoutUserInput> | trackingexpCreateWithoutUserInput[] | trackingexpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutUserInput | trackingexpCreateOrConnectWithoutUserInput[]
    createMany?: trackingexpCreateManyUserInputEnvelope
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
  }

  export type trackingsellUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<trackingsellCreateWithoutUserInput, trackingsellUncheckedCreateWithoutUserInput> | trackingsellCreateWithoutUserInput[] | trackingsellUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutUserInput | trackingsellCreateOrConnectWithoutUserInput[]
    createMany?: trackingsellCreateManyUserInputEnvelope
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
  }

  export type trackingsendUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<trackingsendCreateWithoutUserInput, trackingsendUncheckedCreateWithoutUserInput> | trackingsendCreateWithoutUserInput[] | trackingsendUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutUserInput | trackingsendCreateOrConnectWithoutUserInput[]
    createMany?: trackingsendCreateManyUserInputEnvelope
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
  }

  export type trackingexpUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<trackingexpCreateWithoutUserInput, trackingexpUncheckedCreateWithoutUserInput> | trackingexpCreateWithoutUserInput[] | trackingexpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutUserInput | trackingexpCreateOrConnectWithoutUserInput[]
    createMany?: trackingexpCreateManyUserInputEnvelope
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type trackingsellUpdateManyWithoutUserNestedInput = {
    create?: XOR<trackingsellCreateWithoutUserInput, trackingsellUncheckedCreateWithoutUserInput> | trackingsellCreateWithoutUserInput[] | trackingsellUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutUserInput | trackingsellCreateOrConnectWithoutUserInput[]
    upsert?: trackingsellUpsertWithWhereUniqueWithoutUserInput | trackingsellUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: trackingsellCreateManyUserInputEnvelope
    set?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    disconnect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    delete?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    update?: trackingsellUpdateWithWhereUniqueWithoutUserInput | trackingsellUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: trackingsellUpdateManyWithWhereWithoutUserInput | trackingsellUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
  }

  export type trackingsendUpdateManyWithoutUserNestedInput = {
    create?: XOR<trackingsendCreateWithoutUserInput, trackingsendUncheckedCreateWithoutUserInput> | trackingsendCreateWithoutUserInput[] | trackingsendUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutUserInput | trackingsendCreateOrConnectWithoutUserInput[]
    upsert?: trackingsendUpsertWithWhereUniqueWithoutUserInput | trackingsendUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: trackingsendCreateManyUserInputEnvelope
    set?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    disconnect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    delete?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    update?: trackingsendUpdateWithWhereUniqueWithoutUserInput | trackingsendUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: trackingsendUpdateManyWithWhereWithoutUserInput | trackingsendUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
  }

  export type trackingexpUpdateManyWithoutUserNestedInput = {
    create?: XOR<trackingexpCreateWithoutUserInput, trackingexpUncheckedCreateWithoutUserInput> | trackingexpCreateWithoutUserInput[] | trackingexpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutUserInput | trackingexpCreateOrConnectWithoutUserInput[]
    upsert?: trackingexpUpsertWithWhereUniqueWithoutUserInput | trackingexpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: trackingexpCreateManyUserInputEnvelope
    set?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    disconnect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    delete?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    update?: trackingexpUpdateWithWhereUniqueWithoutUserInput | trackingexpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: trackingexpUpdateManyWithWhereWithoutUserInput | trackingexpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type trackingsellUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<trackingsellCreateWithoutUserInput, trackingsellUncheckedCreateWithoutUserInput> | trackingsellCreateWithoutUserInput[] | trackingsellUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutUserInput | trackingsellCreateOrConnectWithoutUserInput[]
    upsert?: trackingsellUpsertWithWhereUniqueWithoutUserInput | trackingsellUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: trackingsellCreateManyUserInputEnvelope
    set?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    disconnect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    delete?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    update?: trackingsellUpdateWithWhereUniqueWithoutUserInput | trackingsellUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: trackingsellUpdateManyWithWhereWithoutUserInput | trackingsellUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
  }

  export type trackingsendUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<trackingsendCreateWithoutUserInput, trackingsendUncheckedCreateWithoutUserInput> | trackingsendCreateWithoutUserInput[] | trackingsendUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutUserInput | trackingsendCreateOrConnectWithoutUserInput[]
    upsert?: trackingsendUpsertWithWhereUniqueWithoutUserInput | trackingsendUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: trackingsendCreateManyUserInputEnvelope
    set?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    disconnect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    delete?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    update?: trackingsendUpdateWithWhereUniqueWithoutUserInput | trackingsendUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: trackingsendUpdateManyWithWhereWithoutUserInput | trackingsendUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
  }

  export type trackingexpUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<trackingexpCreateWithoutUserInput, trackingexpUncheckedCreateWithoutUserInput> | trackingexpCreateWithoutUserInput[] | trackingexpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutUserInput | trackingexpCreateOrConnectWithoutUserInput[]
    upsert?: trackingexpUpsertWithWhereUniqueWithoutUserInput | trackingexpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: trackingexpCreateManyUserInputEnvelope
    set?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    disconnect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    delete?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    update?: trackingexpUpdateWithWhereUniqueWithoutUserInput | trackingexpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: trackingexpUpdateManyWithWhereWithoutUserInput | trackingexpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
  }

  export type trackingsellCreateNestedManyWithoutProductInput = {
    create?: XOR<trackingsellCreateWithoutProductInput, trackingsellUncheckedCreateWithoutProductInput> | trackingsellCreateWithoutProductInput[] | trackingsellUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutProductInput | trackingsellCreateOrConnectWithoutProductInput[]
    createMany?: trackingsellCreateManyProductInputEnvelope
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
  }

  export type trackingsendCreateNestedManyWithoutProductInput = {
    create?: XOR<trackingsendCreateWithoutProductInput, trackingsendUncheckedCreateWithoutProductInput> | trackingsendCreateWithoutProductInput[] | trackingsendUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutProductInput | trackingsendCreateOrConnectWithoutProductInput[]
    createMany?: trackingsendCreateManyProductInputEnvelope
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
  }

  export type trackingexpCreateNestedManyWithoutProductInput = {
    create?: XOR<trackingexpCreateWithoutProductInput, trackingexpUncheckedCreateWithoutProductInput> | trackingexpCreateWithoutProductInput[] | trackingexpUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutProductInput | trackingexpCreateOrConnectWithoutProductInput[]
    createMany?: trackingexpCreateManyProductInputEnvelope
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
  }

  export type categoryCreateNestedOneWithoutProductInput = {
    create?: XOR<categoryCreateWithoutProductInput, categoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductInput
    connect?: categoryWhereUniqueInput
  }

  export type trackingsellUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<trackingsellCreateWithoutProductInput, trackingsellUncheckedCreateWithoutProductInput> | trackingsellCreateWithoutProductInput[] | trackingsellUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutProductInput | trackingsellCreateOrConnectWithoutProductInput[]
    createMany?: trackingsellCreateManyProductInputEnvelope
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
  }

  export type trackingsendUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<trackingsendCreateWithoutProductInput, trackingsendUncheckedCreateWithoutProductInput> | trackingsendCreateWithoutProductInput[] | trackingsendUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutProductInput | trackingsendCreateOrConnectWithoutProductInput[]
    createMany?: trackingsendCreateManyProductInputEnvelope
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
  }

  export type trackingexpUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<trackingexpCreateWithoutProductInput, trackingexpUncheckedCreateWithoutProductInput> | trackingexpCreateWithoutProductInput[] | trackingexpUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutProductInput | trackingexpCreateOrConnectWithoutProductInput[]
    createMany?: trackingexpCreateManyProductInputEnvelope
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
  }

  export type trackingsellUpdateManyWithoutProductNestedInput = {
    create?: XOR<trackingsellCreateWithoutProductInput, trackingsellUncheckedCreateWithoutProductInput> | trackingsellCreateWithoutProductInput[] | trackingsellUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutProductInput | trackingsellCreateOrConnectWithoutProductInput[]
    upsert?: trackingsellUpsertWithWhereUniqueWithoutProductInput | trackingsellUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: trackingsellCreateManyProductInputEnvelope
    set?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    disconnect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    delete?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    update?: trackingsellUpdateWithWhereUniqueWithoutProductInput | trackingsellUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: trackingsellUpdateManyWithWhereWithoutProductInput | trackingsellUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
  }

  export type trackingsendUpdateManyWithoutProductNestedInput = {
    create?: XOR<trackingsendCreateWithoutProductInput, trackingsendUncheckedCreateWithoutProductInput> | trackingsendCreateWithoutProductInput[] | trackingsendUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutProductInput | trackingsendCreateOrConnectWithoutProductInput[]
    upsert?: trackingsendUpsertWithWhereUniqueWithoutProductInput | trackingsendUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: trackingsendCreateManyProductInputEnvelope
    set?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    disconnect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    delete?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    update?: trackingsendUpdateWithWhereUniqueWithoutProductInput | trackingsendUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: trackingsendUpdateManyWithWhereWithoutProductInput | trackingsendUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
  }

  export type trackingexpUpdateManyWithoutProductNestedInput = {
    create?: XOR<trackingexpCreateWithoutProductInput, trackingexpUncheckedCreateWithoutProductInput> | trackingexpCreateWithoutProductInput[] | trackingexpUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutProductInput | trackingexpCreateOrConnectWithoutProductInput[]
    upsert?: trackingexpUpsertWithWhereUniqueWithoutProductInput | trackingexpUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: trackingexpCreateManyProductInputEnvelope
    set?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    disconnect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    delete?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    update?: trackingexpUpdateWithWhereUniqueWithoutProductInput | trackingexpUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: trackingexpUpdateManyWithWhereWithoutProductInput | trackingexpUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
  }

  export type categoryUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<categoryCreateWithoutProductInput, categoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: categoryCreateOrConnectWithoutProductInput
    upsert?: categoryUpsertWithoutProductInput
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutProductInput, categoryUpdateWithoutProductInput>, categoryUncheckedUpdateWithoutProductInput>
  }

  export type trackingsellUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<trackingsellCreateWithoutProductInput, trackingsellUncheckedCreateWithoutProductInput> | trackingsellCreateWithoutProductInput[] | trackingsellUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutProductInput | trackingsellCreateOrConnectWithoutProductInput[]
    upsert?: trackingsellUpsertWithWhereUniqueWithoutProductInput | trackingsellUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: trackingsellCreateManyProductInputEnvelope
    set?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    disconnect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    delete?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    update?: trackingsellUpdateWithWhereUniqueWithoutProductInput | trackingsellUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: trackingsellUpdateManyWithWhereWithoutProductInput | trackingsellUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
  }

  export type trackingsendUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<trackingsendCreateWithoutProductInput, trackingsendUncheckedCreateWithoutProductInput> | trackingsendCreateWithoutProductInput[] | trackingsendUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutProductInput | trackingsendCreateOrConnectWithoutProductInput[]
    upsert?: trackingsendUpsertWithWhereUniqueWithoutProductInput | trackingsendUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: trackingsendCreateManyProductInputEnvelope
    set?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    disconnect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    delete?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    update?: trackingsendUpdateWithWhereUniqueWithoutProductInput | trackingsendUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: trackingsendUpdateManyWithWhereWithoutProductInput | trackingsendUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
  }

  export type trackingexpUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<trackingexpCreateWithoutProductInput, trackingexpUncheckedCreateWithoutProductInput> | trackingexpCreateWithoutProductInput[] | trackingexpUncheckedCreateWithoutProductInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutProductInput | trackingexpCreateOrConnectWithoutProductInput[]
    upsert?: trackingexpUpsertWithWhereUniqueWithoutProductInput | trackingexpUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: trackingexpCreateManyProductInputEnvelope
    set?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    disconnect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    delete?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    update?: trackingexpUpdateWithWhereUniqueWithoutProductInput | trackingexpUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: trackingexpUpdateManyWithWhereWithoutProductInput | trackingexpUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
  }

  export type trackingsellCreateNestedManyWithoutBrachInput = {
    create?: XOR<trackingsellCreateWithoutBrachInput, trackingsellUncheckedCreateWithoutBrachInput> | trackingsellCreateWithoutBrachInput[] | trackingsellUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutBrachInput | trackingsellCreateOrConnectWithoutBrachInput[]
    createMany?: trackingsellCreateManyBrachInputEnvelope
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
  }

  export type trackingsendCreateNestedManyWithoutBrachInput = {
    create?: XOR<trackingsendCreateWithoutBrachInput, trackingsendUncheckedCreateWithoutBrachInput> | trackingsendCreateWithoutBrachInput[] | trackingsendUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutBrachInput | trackingsendCreateOrConnectWithoutBrachInput[]
    createMany?: trackingsendCreateManyBrachInputEnvelope
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
  }

  export type trackingexpCreateNestedManyWithoutBrachInput = {
    create?: XOR<trackingexpCreateWithoutBrachInput, trackingexpUncheckedCreateWithoutBrachInput> | trackingexpCreateWithoutBrachInput[] | trackingexpUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutBrachInput | trackingexpCreateOrConnectWithoutBrachInput[]
    createMany?: trackingexpCreateManyBrachInputEnvelope
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
  }

  export type trackingsellUncheckedCreateNestedManyWithoutBrachInput = {
    create?: XOR<trackingsellCreateWithoutBrachInput, trackingsellUncheckedCreateWithoutBrachInput> | trackingsellCreateWithoutBrachInput[] | trackingsellUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutBrachInput | trackingsellCreateOrConnectWithoutBrachInput[]
    createMany?: trackingsellCreateManyBrachInputEnvelope
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
  }

  export type trackingsendUncheckedCreateNestedManyWithoutBrachInput = {
    create?: XOR<trackingsendCreateWithoutBrachInput, trackingsendUncheckedCreateWithoutBrachInput> | trackingsendCreateWithoutBrachInput[] | trackingsendUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutBrachInput | trackingsendCreateOrConnectWithoutBrachInput[]
    createMany?: trackingsendCreateManyBrachInputEnvelope
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
  }

  export type trackingexpUncheckedCreateNestedManyWithoutBrachInput = {
    create?: XOR<trackingexpCreateWithoutBrachInput, trackingexpUncheckedCreateWithoutBrachInput> | trackingexpCreateWithoutBrachInput[] | trackingexpUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutBrachInput | trackingexpCreateOrConnectWithoutBrachInput[]
    createMany?: trackingexpCreateManyBrachInputEnvelope
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
  }

  export type trackingsellUpdateManyWithoutBrachNestedInput = {
    create?: XOR<trackingsellCreateWithoutBrachInput, trackingsellUncheckedCreateWithoutBrachInput> | trackingsellCreateWithoutBrachInput[] | trackingsellUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutBrachInput | trackingsellCreateOrConnectWithoutBrachInput[]
    upsert?: trackingsellUpsertWithWhereUniqueWithoutBrachInput | trackingsellUpsertWithWhereUniqueWithoutBrachInput[]
    createMany?: trackingsellCreateManyBrachInputEnvelope
    set?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    disconnect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    delete?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    update?: trackingsellUpdateWithWhereUniqueWithoutBrachInput | trackingsellUpdateWithWhereUniqueWithoutBrachInput[]
    updateMany?: trackingsellUpdateManyWithWhereWithoutBrachInput | trackingsellUpdateManyWithWhereWithoutBrachInput[]
    deleteMany?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
  }

  export type trackingsendUpdateManyWithoutBrachNestedInput = {
    create?: XOR<trackingsendCreateWithoutBrachInput, trackingsendUncheckedCreateWithoutBrachInput> | trackingsendCreateWithoutBrachInput[] | trackingsendUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutBrachInput | trackingsendCreateOrConnectWithoutBrachInput[]
    upsert?: trackingsendUpsertWithWhereUniqueWithoutBrachInput | trackingsendUpsertWithWhereUniqueWithoutBrachInput[]
    createMany?: trackingsendCreateManyBrachInputEnvelope
    set?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    disconnect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    delete?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    update?: trackingsendUpdateWithWhereUniqueWithoutBrachInput | trackingsendUpdateWithWhereUniqueWithoutBrachInput[]
    updateMany?: trackingsendUpdateManyWithWhereWithoutBrachInput | trackingsendUpdateManyWithWhereWithoutBrachInput[]
    deleteMany?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
  }

  export type trackingexpUpdateManyWithoutBrachNestedInput = {
    create?: XOR<trackingexpCreateWithoutBrachInput, trackingexpUncheckedCreateWithoutBrachInput> | trackingexpCreateWithoutBrachInput[] | trackingexpUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutBrachInput | trackingexpCreateOrConnectWithoutBrachInput[]
    upsert?: trackingexpUpsertWithWhereUniqueWithoutBrachInput | trackingexpUpsertWithWhereUniqueWithoutBrachInput[]
    createMany?: trackingexpCreateManyBrachInputEnvelope
    set?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    disconnect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    delete?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    update?: trackingexpUpdateWithWhereUniqueWithoutBrachInput | trackingexpUpdateWithWhereUniqueWithoutBrachInput[]
    updateMany?: trackingexpUpdateManyWithWhereWithoutBrachInput | trackingexpUpdateManyWithWhereWithoutBrachInput[]
    deleteMany?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
  }

  export type trackingsellUncheckedUpdateManyWithoutBrachNestedInput = {
    create?: XOR<trackingsellCreateWithoutBrachInput, trackingsellUncheckedCreateWithoutBrachInput> | trackingsellCreateWithoutBrachInput[] | trackingsellUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsellCreateOrConnectWithoutBrachInput | trackingsellCreateOrConnectWithoutBrachInput[]
    upsert?: trackingsellUpsertWithWhereUniqueWithoutBrachInput | trackingsellUpsertWithWhereUniqueWithoutBrachInput[]
    createMany?: trackingsellCreateManyBrachInputEnvelope
    set?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    disconnect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    delete?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    connect?: trackingsellWhereUniqueInput | trackingsellWhereUniqueInput[]
    update?: trackingsellUpdateWithWhereUniqueWithoutBrachInput | trackingsellUpdateWithWhereUniqueWithoutBrachInput[]
    updateMany?: trackingsellUpdateManyWithWhereWithoutBrachInput | trackingsellUpdateManyWithWhereWithoutBrachInput[]
    deleteMany?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
  }

  export type trackingsendUncheckedUpdateManyWithoutBrachNestedInput = {
    create?: XOR<trackingsendCreateWithoutBrachInput, trackingsendUncheckedCreateWithoutBrachInput> | trackingsendCreateWithoutBrachInput[] | trackingsendUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingsendCreateOrConnectWithoutBrachInput | trackingsendCreateOrConnectWithoutBrachInput[]
    upsert?: trackingsendUpsertWithWhereUniqueWithoutBrachInput | trackingsendUpsertWithWhereUniqueWithoutBrachInput[]
    createMany?: trackingsendCreateManyBrachInputEnvelope
    set?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    disconnect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    delete?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    connect?: trackingsendWhereUniqueInput | trackingsendWhereUniqueInput[]
    update?: trackingsendUpdateWithWhereUniqueWithoutBrachInput | trackingsendUpdateWithWhereUniqueWithoutBrachInput[]
    updateMany?: trackingsendUpdateManyWithWhereWithoutBrachInput | trackingsendUpdateManyWithWhereWithoutBrachInput[]
    deleteMany?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
  }

  export type trackingexpUncheckedUpdateManyWithoutBrachNestedInput = {
    create?: XOR<trackingexpCreateWithoutBrachInput, trackingexpUncheckedCreateWithoutBrachInput> | trackingexpCreateWithoutBrachInput[] | trackingexpUncheckedCreateWithoutBrachInput[]
    connectOrCreate?: trackingexpCreateOrConnectWithoutBrachInput | trackingexpCreateOrConnectWithoutBrachInput[]
    upsert?: trackingexpUpsertWithWhereUniqueWithoutBrachInput | trackingexpUpsertWithWhereUniqueWithoutBrachInput[]
    createMany?: trackingexpCreateManyBrachInputEnvelope
    set?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    disconnect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    delete?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    connect?: trackingexpWhereUniqueInput | trackingexpWhereUniqueInput[]
    update?: trackingexpUpdateWithWhereUniqueWithoutBrachInput | trackingexpUpdateWithWhereUniqueWithoutBrachInput[]
    updateMany?: trackingexpUpdateManyWithWhereWithoutBrachInput | trackingexpUpdateManyWithWhereWithoutBrachInput[]
    deleteMany?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTracksellInput = {
    create?: XOR<UserCreateWithoutTracksellInput, UserUncheckedCreateWithoutTracksellInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracksellInput
    connect?: UserWhereUniqueInput
  }

  export type productCreateNestedOneWithoutTracksellInput = {
    create?: XOR<productCreateWithoutTracksellInput, productUncheckedCreateWithoutTracksellInput>
    connectOrCreate?: productCreateOrConnectWithoutTracksellInput
    connect?: productWhereUniqueInput
  }

  export type brachCreateNestedOneWithoutTracsellInput = {
    create?: XOR<brachCreateWithoutTracsellInput, brachUncheckedCreateWithoutTracsellInput>
    connectOrCreate?: brachCreateOrConnectWithoutTracsellInput
    connect?: brachWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTracksellNestedInput = {
    create?: XOR<UserCreateWithoutTracksellInput, UserUncheckedCreateWithoutTracksellInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracksellInput
    upsert?: UserUpsertWithoutTracksellInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTracksellInput, UserUpdateWithoutTracksellInput>, UserUncheckedUpdateWithoutTracksellInput>
  }

  export type productUpdateOneRequiredWithoutTracksellNestedInput = {
    create?: XOR<productCreateWithoutTracksellInput, productUncheckedCreateWithoutTracksellInput>
    connectOrCreate?: productCreateOrConnectWithoutTracksellInput
    upsert?: productUpsertWithoutTracksellInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutTracksellInput, productUpdateWithoutTracksellInput>, productUncheckedUpdateWithoutTracksellInput>
  }

  export type brachUpdateOneRequiredWithoutTracsellNestedInput = {
    create?: XOR<brachCreateWithoutTracsellInput, brachUncheckedCreateWithoutTracsellInput>
    connectOrCreate?: brachCreateOrConnectWithoutTracsellInput
    upsert?: brachUpsertWithoutTracsellInput
    connect?: brachWhereUniqueInput
    update?: XOR<XOR<brachUpdateToOneWithWhereWithoutTracsellInput, brachUpdateWithoutTracsellInput>, brachUncheckedUpdateWithoutTracsellInput>
  }

  export type UserCreateNestedOneWithoutTracksendInput = {
    create?: XOR<UserCreateWithoutTracksendInput, UserUncheckedCreateWithoutTracksendInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracksendInput
    connect?: UserWhereUniqueInput
  }

  export type productCreateNestedOneWithoutTracksendInput = {
    create?: XOR<productCreateWithoutTracksendInput, productUncheckedCreateWithoutTracksendInput>
    connectOrCreate?: productCreateOrConnectWithoutTracksendInput
    connect?: productWhereUniqueInput
  }

  export type brachCreateNestedOneWithoutTracksendInput = {
    create?: XOR<brachCreateWithoutTracksendInput, brachUncheckedCreateWithoutTracksendInput>
    connectOrCreate?: brachCreateOrConnectWithoutTracksendInput
    connect?: brachWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTracksendNestedInput = {
    create?: XOR<UserCreateWithoutTracksendInput, UserUncheckedCreateWithoutTracksendInput>
    connectOrCreate?: UserCreateOrConnectWithoutTracksendInput
    upsert?: UserUpsertWithoutTracksendInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTracksendInput, UserUpdateWithoutTracksendInput>, UserUncheckedUpdateWithoutTracksendInput>
  }

  export type productUpdateOneRequiredWithoutTracksendNestedInput = {
    create?: XOR<productCreateWithoutTracksendInput, productUncheckedCreateWithoutTracksendInput>
    connectOrCreate?: productCreateOrConnectWithoutTracksendInput
    upsert?: productUpsertWithoutTracksendInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutTracksendInput, productUpdateWithoutTracksendInput>, productUncheckedUpdateWithoutTracksendInput>
  }

  export type brachUpdateOneRequiredWithoutTracksendNestedInput = {
    create?: XOR<brachCreateWithoutTracksendInput, brachUncheckedCreateWithoutTracksendInput>
    connectOrCreate?: brachCreateOrConnectWithoutTracksendInput
    upsert?: brachUpsertWithoutTracksendInput
    connect?: brachWhereUniqueInput
    update?: XOR<XOR<brachUpdateToOneWithWhereWithoutTracksendInput, brachUpdateWithoutTracksendInput>, brachUncheckedUpdateWithoutTracksendInput>
  }

  export type UserCreateNestedOneWithoutTrackexpInput = {
    create?: XOR<UserCreateWithoutTrackexpInput, UserUncheckedCreateWithoutTrackexpInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrackexpInput
    connect?: UserWhereUniqueInput
  }

  export type productCreateNestedOneWithoutTrackexpInput = {
    create?: XOR<productCreateWithoutTrackexpInput, productUncheckedCreateWithoutTrackexpInput>
    connectOrCreate?: productCreateOrConnectWithoutTrackexpInput
    connect?: productWhereUniqueInput
  }

  export type brachCreateNestedOneWithoutTrackexpInput = {
    create?: XOR<brachCreateWithoutTrackexpInput, brachUncheckedCreateWithoutTrackexpInput>
    connectOrCreate?: brachCreateOrConnectWithoutTrackexpInput
    connect?: brachWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTrackexpNestedInput = {
    create?: XOR<UserCreateWithoutTrackexpInput, UserUncheckedCreateWithoutTrackexpInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrackexpInput
    upsert?: UserUpsertWithoutTrackexpInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTrackexpInput, UserUpdateWithoutTrackexpInput>, UserUncheckedUpdateWithoutTrackexpInput>
  }

  export type productUpdateOneRequiredWithoutTrackexpNestedInput = {
    create?: XOR<productCreateWithoutTrackexpInput, productUncheckedCreateWithoutTrackexpInput>
    connectOrCreate?: productCreateOrConnectWithoutTrackexpInput
    upsert?: productUpsertWithoutTrackexpInput
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutTrackexpInput, productUpdateWithoutTrackexpInput>, productUncheckedUpdateWithoutTrackexpInput>
  }

  export type brachUpdateOneRequiredWithoutTrackexpNestedInput = {
    create?: XOR<brachCreateWithoutTrackexpInput, brachUncheckedCreateWithoutTrackexpInput>
    connectOrCreate?: brachCreateOrConnectWithoutTrackexpInput
    upsert?: brachUpsertWithoutTrackexpInput
    connect?: brachWhereUniqueInput
    update?: XOR<XOR<brachUpdateToOneWithWhereWithoutTrackexpInput, brachUpdateWithoutTrackexpInput>, brachUncheckedUpdateWithoutTrackexpInput>
  }

  export type productCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type productUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type productUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    upsert?: productUpsertWithWhereUniqueWithoutCategoryInput | productUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutCategoryInput | productUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productUpdateManyWithWhereWithoutCategoryInput | productUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type productUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput> | productCreateWithoutCategoryInput[] | productUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productCreateOrConnectWithoutCategoryInput | productCreateOrConnectWithoutCategoryInput[]
    upsert?: productUpsertWithWhereUniqueWithoutCategoryInput | productUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productCreateManyCategoryInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutCategoryInput | productUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productUpdateManyWithWhereWithoutCategoryInput | productUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type trackingsellCreateWithoutUserInput = {
    sellCount: number
    sellAt: Date | string
    sellDay: string
    product: productCreateNestedOneWithoutTracksellInput
    brach: brachCreateNestedOneWithoutTracsellInput
  }

  export type trackingsellUncheckedCreateWithoutUserInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    productId: number
    brachId: number
  }

  export type trackingsellCreateOrConnectWithoutUserInput = {
    where: trackingsellWhereUniqueInput
    create: XOR<trackingsellCreateWithoutUserInput, trackingsellUncheckedCreateWithoutUserInput>
  }

  export type trackingsellCreateManyUserInputEnvelope = {
    data: trackingsellCreateManyUserInput | trackingsellCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type trackingsendCreateWithoutUserInput = {
    sendCount: number
    sendAt: Date | string
    sendDay: string
    product: productCreateNestedOneWithoutTracksendInput
    brach: brachCreateNestedOneWithoutTracksendInput
  }

  export type trackingsendUncheckedCreateWithoutUserInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    productId: number
    brachId: number
  }

  export type trackingsendCreateOrConnectWithoutUserInput = {
    where: trackingsendWhereUniqueInput
    create: XOR<trackingsendCreateWithoutUserInput, trackingsendUncheckedCreateWithoutUserInput>
  }

  export type trackingsendCreateManyUserInputEnvelope = {
    data: trackingsendCreateManyUserInput | trackingsendCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type trackingexpCreateWithoutUserInput = {
    expCount: number
    expAt: Date | string
    expDay: string
    product: productCreateNestedOneWithoutTrackexpInput
    brach: brachCreateNestedOneWithoutTrackexpInput
  }

  export type trackingexpUncheckedCreateWithoutUserInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    productId: number
    brachId: number
  }

  export type trackingexpCreateOrConnectWithoutUserInput = {
    where: trackingexpWhereUniqueInput
    create: XOR<trackingexpCreateWithoutUserInput, trackingexpUncheckedCreateWithoutUserInput>
  }

  export type trackingexpCreateManyUserInputEnvelope = {
    data: trackingexpCreateManyUserInput | trackingexpCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type trackingsellUpsertWithWhereUniqueWithoutUserInput = {
    where: trackingsellWhereUniqueInput
    update: XOR<trackingsellUpdateWithoutUserInput, trackingsellUncheckedUpdateWithoutUserInput>
    create: XOR<trackingsellCreateWithoutUserInput, trackingsellUncheckedCreateWithoutUserInput>
  }

  export type trackingsellUpdateWithWhereUniqueWithoutUserInput = {
    where: trackingsellWhereUniqueInput
    data: XOR<trackingsellUpdateWithoutUserInput, trackingsellUncheckedUpdateWithoutUserInput>
  }

  export type trackingsellUpdateManyWithWhereWithoutUserInput = {
    where: trackingsellScalarWhereInput
    data: XOR<trackingsellUpdateManyMutationInput, trackingsellUncheckedUpdateManyWithoutUserInput>
  }

  export type trackingsellScalarWhereInput = {
    AND?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
    OR?: trackingsellScalarWhereInput[]
    NOT?: trackingsellScalarWhereInput | trackingsellScalarWhereInput[]
    id?: IntFilter<"trackingsell"> | number
    sellCount?: IntFilter<"trackingsell"> | number
    sellAt?: DateTimeFilter<"trackingsell"> | Date | string
    sellDay?: StringFilter<"trackingsell"> | string
    userId?: IntFilter<"trackingsell"> | number
    productId?: IntFilter<"trackingsell"> | number
    brachId?: IntFilter<"trackingsell"> | number
  }

  export type trackingsendUpsertWithWhereUniqueWithoutUserInput = {
    where: trackingsendWhereUniqueInput
    update: XOR<trackingsendUpdateWithoutUserInput, trackingsendUncheckedUpdateWithoutUserInput>
    create: XOR<trackingsendCreateWithoutUserInput, trackingsendUncheckedCreateWithoutUserInput>
  }

  export type trackingsendUpdateWithWhereUniqueWithoutUserInput = {
    where: trackingsendWhereUniqueInput
    data: XOR<trackingsendUpdateWithoutUserInput, trackingsendUncheckedUpdateWithoutUserInput>
  }

  export type trackingsendUpdateManyWithWhereWithoutUserInput = {
    where: trackingsendScalarWhereInput
    data: XOR<trackingsendUpdateManyMutationInput, trackingsendUncheckedUpdateManyWithoutUserInput>
  }

  export type trackingsendScalarWhereInput = {
    AND?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
    OR?: trackingsendScalarWhereInput[]
    NOT?: trackingsendScalarWhereInput | trackingsendScalarWhereInput[]
    id?: IntFilter<"trackingsend"> | number
    sendCount?: IntFilter<"trackingsend"> | number
    sendAt?: DateTimeFilter<"trackingsend"> | Date | string
    sendDay?: StringFilter<"trackingsend"> | string
    userId?: IntFilter<"trackingsend"> | number
    productId?: IntFilter<"trackingsend"> | number
    brachId?: IntFilter<"trackingsend"> | number
  }

  export type trackingexpUpsertWithWhereUniqueWithoutUserInput = {
    where: trackingexpWhereUniqueInput
    update: XOR<trackingexpUpdateWithoutUserInput, trackingexpUncheckedUpdateWithoutUserInput>
    create: XOR<trackingexpCreateWithoutUserInput, trackingexpUncheckedCreateWithoutUserInput>
  }

  export type trackingexpUpdateWithWhereUniqueWithoutUserInput = {
    where: trackingexpWhereUniqueInput
    data: XOR<trackingexpUpdateWithoutUserInput, trackingexpUncheckedUpdateWithoutUserInput>
  }

  export type trackingexpUpdateManyWithWhereWithoutUserInput = {
    where: trackingexpScalarWhereInput
    data: XOR<trackingexpUpdateManyMutationInput, trackingexpUncheckedUpdateManyWithoutUserInput>
  }

  export type trackingexpScalarWhereInput = {
    AND?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
    OR?: trackingexpScalarWhereInput[]
    NOT?: trackingexpScalarWhereInput | trackingexpScalarWhereInput[]
    id?: IntFilter<"trackingexp"> | number
    expCount?: IntFilter<"trackingexp"> | number
    expAt?: DateTimeFilter<"trackingexp"> | Date | string
    expDay?: StringFilter<"trackingexp"> | string
    userId?: IntFilter<"trackingexp"> | number
    productId?: IntFilter<"trackingexp"> | number
    brachId?: IntFilter<"trackingexp"> | number
  }

  export type trackingsellCreateWithoutProductInput = {
    sellCount: number
    sellAt: Date | string
    sellDay: string
    User: UserCreateNestedOneWithoutTracksellInput
    brach: brachCreateNestedOneWithoutTracsellInput
  }

  export type trackingsellUncheckedCreateWithoutProductInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    userId: number
    brachId: number
  }

  export type trackingsellCreateOrConnectWithoutProductInput = {
    where: trackingsellWhereUniqueInput
    create: XOR<trackingsellCreateWithoutProductInput, trackingsellUncheckedCreateWithoutProductInput>
  }

  export type trackingsellCreateManyProductInputEnvelope = {
    data: trackingsellCreateManyProductInput | trackingsellCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type trackingsendCreateWithoutProductInput = {
    sendCount: number
    sendAt: Date | string
    sendDay: string
    User: UserCreateNestedOneWithoutTracksendInput
    brach: brachCreateNestedOneWithoutTracksendInput
  }

  export type trackingsendUncheckedCreateWithoutProductInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    userId: number
    brachId: number
  }

  export type trackingsendCreateOrConnectWithoutProductInput = {
    where: trackingsendWhereUniqueInput
    create: XOR<trackingsendCreateWithoutProductInput, trackingsendUncheckedCreateWithoutProductInput>
  }

  export type trackingsendCreateManyProductInputEnvelope = {
    data: trackingsendCreateManyProductInput | trackingsendCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type trackingexpCreateWithoutProductInput = {
    expCount: number
    expAt: Date | string
    expDay: string
    User: UserCreateNestedOneWithoutTrackexpInput
    brach: brachCreateNestedOneWithoutTrackexpInput
  }

  export type trackingexpUncheckedCreateWithoutProductInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    userId: number
    brachId: number
  }

  export type trackingexpCreateOrConnectWithoutProductInput = {
    where: trackingexpWhereUniqueInput
    create: XOR<trackingexpCreateWithoutProductInput, trackingexpUncheckedCreateWithoutProductInput>
  }

  export type trackingexpCreateManyProductInputEnvelope = {
    data: trackingexpCreateManyProductInput | trackingexpCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type categoryCreateWithoutProductInput = {
    name: string
  }

  export type categoryUncheckedCreateWithoutProductInput = {
    id?: number
    name: string
  }

  export type categoryCreateOrConnectWithoutProductInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutProductInput, categoryUncheckedCreateWithoutProductInput>
  }

  export type trackingsellUpsertWithWhereUniqueWithoutProductInput = {
    where: trackingsellWhereUniqueInput
    update: XOR<trackingsellUpdateWithoutProductInput, trackingsellUncheckedUpdateWithoutProductInput>
    create: XOR<trackingsellCreateWithoutProductInput, trackingsellUncheckedCreateWithoutProductInput>
  }

  export type trackingsellUpdateWithWhereUniqueWithoutProductInput = {
    where: trackingsellWhereUniqueInput
    data: XOR<trackingsellUpdateWithoutProductInput, trackingsellUncheckedUpdateWithoutProductInput>
  }

  export type trackingsellUpdateManyWithWhereWithoutProductInput = {
    where: trackingsellScalarWhereInput
    data: XOR<trackingsellUpdateManyMutationInput, trackingsellUncheckedUpdateManyWithoutProductInput>
  }

  export type trackingsendUpsertWithWhereUniqueWithoutProductInput = {
    where: trackingsendWhereUniqueInput
    update: XOR<trackingsendUpdateWithoutProductInput, trackingsendUncheckedUpdateWithoutProductInput>
    create: XOR<trackingsendCreateWithoutProductInput, trackingsendUncheckedCreateWithoutProductInput>
  }

  export type trackingsendUpdateWithWhereUniqueWithoutProductInput = {
    where: trackingsendWhereUniqueInput
    data: XOR<trackingsendUpdateWithoutProductInput, trackingsendUncheckedUpdateWithoutProductInput>
  }

  export type trackingsendUpdateManyWithWhereWithoutProductInput = {
    where: trackingsendScalarWhereInput
    data: XOR<trackingsendUpdateManyMutationInput, trackingsendUncheckedUpdateManyWithoutProductInput>
  }

  export type trackingexpUpsertWithWhereUniqueWithoutProductInput = {
    where: trackingexpWhereUniqueInput
    update: XOR<trackingexpUpdateWithoutProductInput, trackingexpUncheckedUpdateWithoutProductInput>
    create: XOR<trackingexpCreateWithoutProductInput, trackingexpUncheckedCreateWithoutProductInput>
  }

  export type trackingexpUpdateWithWhereUniqueWithoutProductInput = {
    where: trackingexpWhereUniqueInput
    data: XOR<trackingexpUpdateWithoutProductInput, trackingexpUncheckedUpdateWithoutProductInput>
  }

  export type trackingexpUpdateManyWithWhereWithoutProductInput = {
    where: trackingexpScalarWhereInput
    data: XOR<trackingexpUpdateManyMutationInput, trackingexpUncheckedUpdateManyWithoutProductInput>
  }

  export type categoryUpsertWithoutProductInput = {
    update: XOR<categoryUpdateWithoutProductInput, categoryUncheckedUpdateWithoutProductInput>
    create: XOR<categoryCreateWithoutProductInput, categoryUncheckedCreateWithoutProductInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutProductInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutProductInput, categoryUncheckedUpdateWithoutProductInput>
  }

  export type categoryUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type trackingsellCreateWithoutBrachInput = {
    sellCount: number
    sellAt: Date | string
    sellDay: string
    User: UserCreateNestedOneWithoutTracksellInput
    product: productCreateNestedOneWithoutTracksellInput
  }

  export type trackingsellUncheckedCreateWithoutBrachInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    userId: number
    productId: number
  }

  export type trackingsellCreateOrConnectWithoutBrachInput = {
    where: trackingsellWhereUniqueInput
    create: XOR<trackingsellCreateWithoutBrachInput, trackingsellUncheckedCreateWithoutBrachInput>
  }

  export type trackingsellCreateManyBrachInputEnvelope = {
    data: trackingsellCreateManyBrachInput | trackingsellCreateManyBrachInput[]
    skipDuplicates?: boolean
  }

  export type trackingsendCreateWithoutBrachInput = {
    sendCount: number
    sendAt: Date | string
    sendDay: string
    User: UserCreateNestedOneWithoutTracksendInput
    product: productCreateNestedOneWithoutTracksendInput
  }

  export type trackingsendUncheckedCreateWithoutBrachInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    userId: number
    productId: number
  }

  export type trackingsendCreateOrConnectWithoutBrachInput = {
    where: trackingsendWhereUniqueInput
    create: XOR<trackingsendCreateWithoutBrachInput, trackingsendUncheckedCreateWithoutBrachInput>
  }

  export type trackingsendCreateManyBrachInputEnvelope = {
    data: trackingsendCreateManyBrachInput | trackingsendCreateManyBrachInput[]
    skipDuplicates?: boolean
  }

  export type trackingexpCreateWithoutBrachInput = {
    expCount: number
    expAt: Date | string
    expDay: string
    User: UserCreateNestedOneWithoutTrackexpInput
    product: productCreateNestedOneWithoutTrackexpInput
  }

  export type trackingexpUncheckedCreateWithoutBrachInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    userId: number
    productId: number
  }

  export type trackingexpCreateOrConnectWithoutBrachInput = {
    where: trackingexpWhereUniqueInput
    create: XOR<trackingexpCreateWithoutBrachInput, trackingexpUncheckedCreateWithoutBrachInput>
  }

  export type trackingexpCreateManyBrachInputEnvelope = {
    data: trackingexpCreateManyBrachInput | trackingexpCreateManyBrachInput[]
    skipDuplicates?: boolean
  }

  export type trackingsellUpsertWithWhereUniqueWithoutBrachInput = {
    where: trackingsellWhereUniqueInput
    update: XOR<trackingsellUpdateWithoutBrachInput, trackingsellUncheckedUpdateWithoutBrachInput>
    create: XOR<trackingsellCreateWithoutBrachInput, trackingsellUncheckedCreateWithoutBrachInput>
  }

  export type trackingsellUpdateWithWhereUniqueWithoutBrachInput = {
    where: trackingsellWhereUniqueInput
    data: XOR<trackingsellUpdateWithoutBrachInput, trackingsellUncheckedUpdateWithoutBrachInput>
  }

  export type trackingsellUpdateManyWithWhereWithoutBrachInput = {
    where: trackingsellScalarWhereInput
    data: XOR<trackingsellUpdateManyMutationInput, trackingsellUncheckedUpdateManyWithoutBrachInput>
  }

  export type trackingsendUpsertWithWhereUniqueWithoutBrachInput = {
    where: trackingsendWhereUniqueInput
    update: XOR<trackingsendUpdateWithoutBrachInput, trackingsendUncheckedUpdateWithoutBrachInput>
    create: XOR<trackingsendCreateWithoutBrachInput, trackingsendUncheckedCreateWithoutBrachInput>
  }

  export type trackingsendUpdateWithWhereUniqueWithoutBrachInput = {
    where: trackingsendWhereUniqueInput
    data: XOR<trackingsendUpdateWithoutBrachInput, trackingsendUncheckedUpdateWithoutBrachInput>
  }

  export type trackingsendUpdateManyWithWhereWithoutBrachInput = {
    where: trackingsendScalarWhereInput
    data: XOR<trackingsendUpdateManyMutationInput, trackingsendUncheckedUpdateManyWithoutBrachInput>
  }

  export type trackingexpUpsertWithWhereUniqueWithoutBrachInput = {
    where: trackingexpWhereUniqueInput
    update: XOR<trackingexpUpdateWithoutBrachInput, trackingexpUncheckedUpdateWithoutBrachInput>
    create: XOR<trackingexpCreateWithoutBrachInput, trackingexpUncheckedCreateWithoutBrachInput>
  }

  export type trackingexpUpdateWithWhereUniqueWithoutBrachInput = {
    where: trackingexpWhereUniqueInput
    data: XOR<trackingexpUpdateWithoutBrachInput, trackingexpUncheckedUpdateWithoutBrachInput>
  }

  export type trackingexpUpdateManyWithWhereWithoutBrachInput = {
    where: trackingexpScalarWhereInput
    data: XOR<trackingexpUpdateManyMutationInput, trackingexpUncheckedUpdateManyWithoutBrachInput>
  }

  export type UserCreateWithoutTracksellInput = {
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksend?: trackingsendCreateNestedManyWithoutUserInput
    trackexp?: trackingexpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTracksellInput = {
    id?: number
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutUserInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTracksellInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTracksellInput, UserUncheckedCreateWithoutTracksellInput>
  }

  export type productCreateWithoutTracksellInput = {
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    tracksend?: trackingsendCreateNestedManyWithoutProductInput
    trackexp?: trackingexpCreateNestedManyWithoutProductInput
    category: categoryCreateNestedOneWithoutProductInput
  }

  export type productUncheckedCreateWithoutTracksellInput = {
    id?: number
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    categoryId: number
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutProductInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutTracksellInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutTracksellInput, productUncheckedCreateWithoutTracksellInput>
  }

  export type brachCreateWithoutTracsellInput = {
    name: string
    tracksend?: trackingsendCreateNestedManyWithoutBrachInput
    trackexp?: trackingexpCreateNestedManyWithoutBrachInput
  }

  export type brachUncheckedCreateWithoutTracsellInput = {
    id?: number
    name: string
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutBrachInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutBrachInput
  }

  export type brachCreateOrConnectWithoutTracsellInput = {
    where: brachWhereUniqueInput
    create: XOR<brachCreateWithoutTracsellInput, brachUncheckedCreateWithoutTracsellInput>
  }

  export type UserUpsertWithoutTracksellInput = {
    update: XOR<UserUpdateWithoutTracksellInput, UserUncheckedUpdateWithoutTracksellInput>
    create: XOR<UserCreateWithoutTracksellInput, UserUncheckedCreateWithoutTracksellInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTracksellInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTracksellInput, UserUncheckedUpdateWithoutTracksellInput>
  }

  export type UserUpdateWithoutTracksellInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksend?: trackingsendUpdateManyWithoutUserNestedInput
    trackexp?: trackingexpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTracksellInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksend?: trackingsendUncheckedUpdateManyWithoutUserNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productUpsertWithoutTracksellInput = {
    update: XOR<productUpdateWithoutTracksellInput, productUncheckedUpdateWithoutTracksellInput>
    create: XOR<productCreateWithoutTracksellInput, productUncheckedCreateWithoutTracksellInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutTracksellInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutTracksellInput, productUncheckedUpdateWithoutTracksellInput>
  }

  export type productUpdateWithoutTracksellInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksend?: trackingsendUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUpdateManyWithoutProductNestedInput
    category?: categoryUpdateOneRequiredWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutTracksellInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    tracksend?: trackingsendUncheckedUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutProductNestedInput
  }

  export type brachUpsertWithoutTracsellInput = {
    update: XOR<brachUpdateWithoutTracsellInput, brachUncheckedUpdateWithoutTracsellInput>
    create: XOR<brachCreateWithoutTracsellInput, brachUncheckedCreateWithoutTracsellInput>
    where?: brachWhereInput
  }

  export type brachUpdateToOneWithWhereWithoutTracsellInput = {
    where?: brachWhereInput
    data: XOR<brachUpdateWithoutTracsellInput, brachUncheckedUpdateWithoutTracsellInput>
  }

  export type brachUpdateWithoutTracsellInput = {
    name?: StringFieldUpdateOperationsInput | string
    tracksend?: trackingsendUpdateManyWithoutBrachNestedInput
    trackexp?: trackingexpUpdateManyWithoutBrachNestedInput
  }

  export type brachUncheckedUpdateWithoutTracsellInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tracksend?: trackingsendUncheckedUpdateManyWithoutBrachNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutBrachNestedInput
  }

  export type UserCreateWithoutTracksendInput = {
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksell?: trackingsellCreateNestedManyWithoutUserInput
    trackexp?: trackingexpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTracksendInput = {
    id?: number
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksell?: trackingsellUncheckedCreateNestedManyWithoutUserInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTracksendInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTracksendInput, UserUncheckedCreateWithoutTracksendInput>
  }

  export type productCreateWithoutTracksendInput = {
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    tracksell?: trackingsellCreateNestedManyWithoutProductInput
    trackexp?: trackingexpCreateNestedManyWithoutProductInput
    category: categoryCreateNestedOneWithoutProductInput
  }

  export type productUncheckedCreateWithoutTracksendInput = {
    id?: number
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    categoryId: number
    tracksell?: trackingsellUncheckedCreateNestedManyWithoutProductInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutTracksendInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutTracksendInput, productUncheckedCreateWithoutTracksendInput>
  }

  export type brachCreateWithoutTracksendInput = {
    name: string
    tracsell?: trackingsellCreateNestedManyWithoutBrachInput
    trackexp?: trackingexpCreateNestedManyWithoutBrachInput
  }

  export type brachUncheckedCreateWithoutTracksendInput = {
    id?: number
    name: string
    tracsell?: trackingsellUncheckedCreateNestedManyWithoutBrachInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutBrachInput
  }

  export type brachCreateOrConnectWithoutTracksendInput = {
    where: brachWhereUniqueInput
    create: XOR<brachCreateWithoutTracksendInput, brachUncheckedCreateWithoutTracksendInput>
  }

  export type UserUpsertWithoutTracksendInput = {
    update: XOR<UserUpdateWithoutTracksendInput, UserUncheckedUpdateWithoutTracksendInput>
    create: XOR<UserCreateWithoutTracksendInput, UserUncheckedCreateWithoutTracksendInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTracksendInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTracksendInput, UserUncheckedUpdateWithoutTracksendInput>
  }

  export type UserUpdateWithoutTracksendInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUpdateManyWithoutUserNestedInput
    trackexp?: trackingexpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTracksendInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUncheckedUpdateManyWithoutUserNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productUpsertWithoutTracksendInput = {
    update: XOR<productUpdateWithoutTracksendInput, productUncheckedUpdateWithoutTracksendInput>
    create: XOR<productCreateWithoutTracksendInput, productUncheckedCreateWithoutTracksendInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutTracksendInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutTracksendInput, productUncheckedUpdateWithoutTracksendInput>
  }

  export type productUpdateWithoutTracksendInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUpdateManyWithoutProductNestedInput
    category?: categoryUpdateOneRequiredWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutTracksendInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    tracksell?: trackingsellUncheckedUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutProductNestedInput
  }

  export type brachUpsertWithoutTracksendInput = {
    update: XOR<brachUpdateWithoutTracksendInput, brachUncheckedUpdateWithoutTracksendInput>
    create: XOR<brachCreateWithoutTracksendInput, brachUncheckedCreateWithoutTracksendInput>
    where?: brachWhereInput
  }

  export type brachUpdateToOneWithWhereWithoutTracksendInput = {
    where?: brachWhereInput
    data: XOR<brachUpdateWithoutTracksendInput, brachUncheckedUpdateWithoutTracksendInput>
  }

  export type brachUpdateWithoutTracksendInput = {
    name?: StringFieldUpdateOperationsInput | string
    tracsell?: trackingsellUpdateManyWithoutBrachNestedInput
    trackexp?: trackingexpUpdateManyWithoutBrachNestedInput
  }

  export type brachUncheckedUpdateWithoutTracksendInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tracsell?: trackingsellUncheckedUpdateManyWithoutBrachNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutBrachNestedInput
  }

  export type UserCreateWithoutTrackexpInput = {
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksell?: trackingsellCreateNestedManyWithoutUserInput
    tracksend?: trackingsendCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTrackexpInput = {
    id?: number
    firstname: string
    lastname: string
    password?: string
    phonenumber: string
    role?: string
    status?: boolean
    birstDate: Date | string
    image?: string | null
    tracksell?: trackingsellUncheckedCreateNestedManyWithoutUserInput
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTrackexpInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrackexpInput, UserUncheckedCreateWithoutTrackexpInput>
  }

  export type productCreateWithoutTrackexpInput = {
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    tracksell?: trackingsellCreateNestedManyWithoutProductInput
    tracksend?: trackingsendCreateNestedManyWithoutProductInput
    category: categoryCreateNestedOneWithoutProductInput
  }

  export type productUncheckedCreateWithoutTrackexpInput = {
    id?: number
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    categoryId: number
    tracksell?: trackingsellUncheckedCreateNestedManyWithoutProductInput
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutTrackexpInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutTrackexpInput, productUncheckedCreateWithoutTrackexpInput>
  }

  export type brachCreateWithoutTrackexpInput = {
    name: string
    tracsell?: trackingsellCreateNestedManyWithoutBrachInput
    tracksend?: trackingsendCreateNestedManyWithoutBrachInput
  }

  export type brachUncheckedCreateWithoutTrackexpInput = {
    id?: number
    name: string
    tracsell?: trackingsellUncheckedCreateNestedManyWithoutBrachInput
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutBrachInput
  }

  export type brachCreateOrConnectWithoutTrackexpInput = {
    where: brachWhereUniqueInput
    create: XOR<brachCreateWithoutTrackexpInput, brachUncheckedCreateWithoutTrackexpInput>
  }

  export type UserUpsertWithoutTrackexpInput = {
    update: XOR<UserUpdateWithoutTrackexpInput, UserUncheckedUpdateWithoutTrackexpInput>
    create: XOR<UserCreateWithoutTrackexpInput, UserUncheckedCreateWithoutTrackexpInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTrackexpInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTrackexpInput, UserUncheckedUpdateWithoutTrackexpInput>
  }

  export type UserUpdateWithoutTrackexpInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUpdateManyWithoutUserNestedInput
    tracksend?: trackingsendUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTrackexpInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phonenumber?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    birstDate?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUncheckedUpdateManyWithoutUserNestedInput
    tracksend?: trackingsendUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productUpsertWithoutTrackexpInput = {
    update: XOR<productUpdateWithoutTrackexpInput, productUncheckedUpdateWithoutTrackexpInput>
    create: XOR<productCreateWithoutTrackexpInput, productUncheckedCreateWithoutTrackexpInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutTrackexpInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutTrackexpInput, productUncheckedUpdateWithoutTrackexpInput>
  }

  export type productUpdateWithoutTrackexpInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUpdateManyWithoutProductNestedInput
    tracksend?: trackingsendUpdateManyWithoutProductNestedInput
    category?: categoryUpdateOneRequiredWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutTrackexpInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    tracksell?: trackingsellUncheckedUpdateManyWithoutProductNestedInput
    tracksend?: trackingsendUncheckedUpdateManyWithoutProductNestedInput
  }

  export type brachUpsertWithoutTrackexpInput = {
    update: XOR<brachUpdateWithoutTrackexpInput, brachUncheckedUpdateWithoutTrackexpInput>
    create: XOR<brachCreateWithoutTrackexpInput, brachUncheckedCreateWithoutTrackexpInput>
    where?: brachWhereInput
  }

  export type brachUpdateToOneWithWhereWithoutTrackexpInput = {
    where?: brachWhereInput
    data: XOR<brachUpdateWithoutTrackexpInput, brachUncheckedUpdateWithoutTrackexpInput>
  }

  export type brachUpdateWithoutTrackexpInput = {
    name?: StringFieldUpdateOperationsInput | string
    tracsell?: trackingsellUpdateManyWithoutBrachNestedInput
    tracksend?: trackingsendUpdateManyWithoutBrachNestedInput
  }

  export type brachUncheckedUpdateWithoutTrackexpInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tracsell?: trackingsellUncheckedUpdateManyWithoutBrachNestedInput
    tracksend?: trackingsendUncheckedUpdateManyWithoutBrachNestedInput
  }

  export type productCreateWithoutCategoryInput = {
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    tracksell?: trackingsellCreateNestedManyWithoutProductInput
    tracksend?: trackingsendCreateNestedManyWithoutProductInput
    trackexp?: trackingexpCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
    tracksell?: trackingsellUncheckedCreateNestedManyWithoutProductInput
    tracksend?: trackingsendUncheckedCreateNestedManyWithoutProductInput
    trackexp?: trackingexpUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCategoryInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput>
  }

  export type productCreateManyCategoryInputEnvelope = {
    data: productCreateManyCategoryInput | productCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type productUpsertWithWhereUniqueWithoutCategoryInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutCategoryInput, productUncheckedUpdateWithoutCategoryInput>
    create: XOR<productCreateWithoutCategoryInput, productUncheckedCreateWithoutCategoryInput>
  }

  export type productUpdateWithWhereUniqueWithoutCategoryInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutCategoryInput, productUncheckedUpdateWithoutCategoryInput>
  }

  export type productUpdateManyWithWhereWithoutCategoryInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutCategoryInput>
  }

  export type productScalarWhereInput = {
    AND?: productScalarWhereInput | productScalarWhereInput[]
    OR?: productScalarWhereInput[]
    NOT?: productScalarWhereInput | productScalarWhereInput[]
    id?: IntFilter<"product"> | number
    name?: StringFilter<"product"> | string
    price?: IntFilter<"product"> | number
    sellprice?: IntFilter<"product"> | number
    lifetime?: IntFilter<"product"> | number
    image?: StringNullableFilter<"product"> | string | null
    categoryId?: IntFilter<"product"> | number
  }

  export type trackingsellCreateManyUserInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    productId: number
    brachId: number
  }

  export type trackingsendCreateManyUserInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    productId: number
    brachId: number
  }

  export type trackingexpCreateManyUserInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    productId: number
    brachId: number
  }

  export type trackingsellUpdateWithoutUserInput = {
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    product?: productUpdateOneRequiredWithoutTracksellNestedInput
    brach?: brachUpdateOneRequiredWithoutTracsellNestedInput
  }

  export type trackingsellUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsellUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendUpdateWithoutUserInput = {
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    product?: productUpdateOneRequiredWithoutTracksendNestedInput
    brach?: brachUpdateOneRequiredWithoutTracksendNestedInput
  }

  export type trackingsendUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpUpdateWithoutUserInput = {
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    product?: productUpdateOneRequiredWithoutTrackexpNestedInput
    brach?: brachUpdateOneRequiredWithoutTrackexpNestedInput
  }

  export type trackingexpUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    productId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsellCreateManyProductInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    userId: number
    brachId: number
  }

  export type trackingsendCreateManyProductInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    userId: number
    brachId: number
  }

  export type trackingexpCreateManyProductInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    userId: number
    brachId: number
  }

  export type trackingsellUpdateWithoutProductInput = {
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTracksellNestedInput
    brach?: brachUpdateOneRequiredWithoutTracsellNestedInput
  }

  export type trackingsellUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsellUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendUpdateWithoutProductInput = {
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTracksendNestedInput
    brach?: brachUpdateOneRequiredWithoutTracksendNestedInput
  }

  export type trackingsendUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpUpdateWithoutProductInput = {
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTrackexpNestedInput
    brach?: brachUpdateOneRequiredWithoutTrackexpNestedInput
  }

  export type trackingexpUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    brachId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsellCreateManyBrachInput = {
    id?: number
    sellCount: number
    sellAt: Date | string
    sellDay: string
    userId: number
    productId: number
  }

  export type trackingsendCreateManyBrachInput = {
    id?: number
    sendCount: number
    sendAt: Date | string
    sendDay: string
    userId: number
    productId: number
  }

  export type trackingexpCreateManyBrachInput = {
    id?: number
    expCount: number
    expAt: Date | string
    expDay: string
    userId: number
    productId: number
  }

  export type trackingsellUpdateWithoutBrachInput = {
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTracksellNestedInput
    product?: productUpdateOneRequiredWithoutTracksellNestedInput
  }

  export type trackingsellUncheckedUpdateWithoutBrachInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsellUncheckedUpdateManyWithoutBrachInput = {
    id?: IntFieldUpdateOperationsInput | number
    sellCount?: IntFieldUpdateOperationsInput | number
    sellAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendUpdateWithoutBrachInput = {
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTracksendNestedInput
    product?: productUpdateOneRequiredWithoutTracksendNestedInput
  }

  export type trackingsendUncheckedUpdateWithoutBrachInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingsendUncheckedUpdateManyWithoutBrachInput = {
    id?: IntFieldUpdateOperationsInput | number
    sendCount?: IntFieldUpdateOperationsInput | number
    sendAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sendDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpUpdateWithoutBrachInput = {
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutTrackexpNestedInput
    product?: productUpdateOneRequiredWithoutTrackexpNestedInput
  }

  export type trackingexpUncheckedUpdateWithoutBrachInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type trackingexpUncheckedUpdateManyWithoutBrachInput = {
    id?: IntFieldUpdateOperationsInput | number
    expCount?: IntFieldUpdateOperationsInput | number
    expAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expDay?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
  }

  export type productCreateManyCategoryInput = {
    id?: number
    name: string
    price: number
    sellprice: number
    lifetime?: number
    image?: string | null
  }

  export type productUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUpdateManyWithoutProductNestedInput
    tracksend?: trackingsendUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    tracksell?: trackingsellUncheckedUpdateManyWithoutProductNestedInput
    tracksend?: trackingsendUncheckedUpdateManyWithoutProductNestedInput
    trackexp?: trackingexpUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    sellprice?: IntFieldUpdateOperationsInput | number
    lifetime?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}