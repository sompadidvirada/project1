// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int            @id @unique @default(autoincrement())
  firstname   String
  lastname    String
  password    String         @default("1234")
  phonenumber String         @unique
  role        String         @default("user")
  status      Boolean        @default(true)
  birstDate   DateTime
  calendar    calendar[]
  image       String?
  tracksell   trackingsell[]
  tracksend   trackingsend[]
  trackexp    trackingexp[]
}

model product {
  id              Int               @id @unique @default(autoincrement())
  name            String
  price           Int
  sellprice       Int
  status          String            @default("A")
  lifetime        Int               @default(7)
  image           String?
  tracksell       trackingsell[]
  tracksend       trackingsend[]
  trackexp        trackingexp[]
  category        category          @relation(fields: [categoryId], references: [id])
  categoryId      Int
  avilableproduct avilableproduct[]
}

model brach {
  id              Int               @id @unique @default(autoincrement())
  name            String
  tracsell        trackingsell[]
  tracksend       trackingsend[]
  trackexp        trackingexp[]
  avilableproduct avilableproduct[]
}

model calendar {
  id          Int      @id @unique @default(autoincrement())
  suplyer     String
  discription String
  polink      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  date        DateTime
  isSuccess   Boolean  @default(false)
}

model avilableproduct {
  id            Int       @id @unique @default(autoincrement())
  aviableStatus Boolean   @default(true)
  updateAt      DateTime? @updatedAt
  // Relations
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  brach   brach @relation(fields: [brachId], references: [id], onDelete: Cascade)
  brachId Int

  @@unique([productId, brachId]) // Prevent duplicate records for the same product-branch pair
}

model trackingsell {
  id        Int      @id @unique @default(autoincrement())
  sellCount Int
  sellAt    DateTime
  sellDay   String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  brach     brach    @relation(fields: [brachId], references: [id])
  brachId   Int

  @@unique([productId, brachId, sellAt])
}

model trackingsend {
  id        Int      @id @unique @default(autoincrement())
  sendCount Int
  sendAt    DateTime
  sendDay   String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  brach     brach    @relation(fields: [brachId], references: [id])
  brachId   Int

  @@unique([productId, brachId, sendAt])
}

model trackingexp {
  id        Int      @id @unique @default(autoincrement())
  expCount  Int
  expAt     DateTime
  expDay    String
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  brach     brach    @relation(fields: [brachId], references: [id])
  brachId   Int

  @@unique([productId, brachId, expAt])
}

model category {
  id      Int       @id @default(autoincrement())
  name    String
  product product[]
}
